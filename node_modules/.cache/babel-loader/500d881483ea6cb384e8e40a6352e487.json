{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport RelationalField from \"./RelationalField\";\nimport { manyToManyDescriptor } from \"../descriptors\";\nimport { m2mName, m2mToFieldName, m2mFromFieldName } from \"../utils\";\n/**\n * @memberof module:fields\n */\n\nexport var ManyToMany = /*#__PURE__*/function (_RelationalField) {\n  _inheritsLoose(ManyToMany, _RelationalField);\n\n  function ManyToMany() {\n    return _RelationalField.apply(this, arguments) || this;\n  }\n\n  var _proto = ManyToMany.prototype;\n\n  _proto.getDefault = function getDefault() {\n    return [];\n  };\n\n  _proto.getThroughModelName = function getThroughModelName(fieldName, model) {\n    return this.through || m2mName(model.modelName, fieldName);\n  };\n\n  _proto.createForwardsDescriptor = function createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n    return manyToManyDescriptor(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), false);\n  };\n\n  _proto.createBackwardsDescriptor = function createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n    return manyToManyDescriptor(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), true);\n  };\n\n  _proto.createBackwardsVirtualField = function createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n    var ThisField = this.getClass();\n    return new ThisField({\n      to: model.modelName,\n      relatedName: fieldName,\n      through: throughModel.modelName,\n      throughFields: this.getThroughFields(fieldName, model, toModel, throughModel)\n    });\n  };\n\n  _proto.createForwardsVirtualField = function createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n    var ThisField = this.getClass();\n    return new ThisField({\n      to: toModel.modelName,\n      relatedName: fieldName,\n      through: this.through,\n      throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n      as: this.as\n    });\n  };\n\n  _proto.getThroughFields = function getThroughFields(fieldName, model, toModel, throughModel) {\n    if (this.throughFields) {\n      var _this$throughFields = _slicedToArray(this.throughFields, 2),\n          fieldAName = _this$throughFields[0],\n          fieldBName = _this$throughFields[1];\n\n      var fieldA = throughModel.fields[fieldAName];\n      return {\n        to: fieldA.references(toModel) ? fieldAName : fieldBName,\n        from: fieldA.references(toModel) ? fieldBName : fieldAName\n      };\n    }\n\n    if (model.modelName === toModel.modelName) {\n      /**\n       * we have no way of determining the relationship's\n       * direction here, so we need to assume that the user\n       * did not use a custom through model\n       * see ORM#registerManyToManyModelsFor\n       */\n      return {\n        to: m2mToFieldName(toModel.modelName),\n        from: m2mFromFieldName(model.modelName)\n      };\n    }\n    /**\n     * determine which field references which model\n     * and infer the directions from that\n     */\n\n\n    var throughModelFieldReferencing = function throughModelFieldReferencing(otherModel) {\n      return Object.keys(throughModel.fields).find(function (someFieldName) {\n        return throughModel.fields[someFieldName].references(otherModel);\n      });\n    };\n\n    return {\n      to: throughModelFieldReferencing(toModel),\n      from: throughModelFieldReferencing(model)\n    };\n  };\n\n  _createClass(ManyToMany, [{\n    key: \"installsForwardsVirtualField\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return ManyToMany;\n}(RelationalField);\nexport default ManyToMany;","map":{"version":3,"names":["_slicedToArray","_createClass","_inheritsLoose","RelationalField","manyToManyDescriptor","m2mName","m2mToFieldName","m2mFromFieldName","ManyToMany","_RelationalField","apply","arguments","_proto","prototype","getDefault","getThroughModelName","fieldName","model","through","modelName","createForwardsDescriptor","toModel","throughModel","getThroughFields","createBackwardsDescriptor","createBackwardsVirtualField","ThisField","getClass","to","relatedName","throughFields","createForwardsVirtualField","as","_this$throughFields","fieldAName","fieldBName","fieldA","fields","references","from","throughModelFieldReferencing","otherModel","Object","keys","find","someFieldName","key","get"],"sources":["/Users/developer/task/task3/node_modules/redux-orm/es/fields/ManyToMany.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport RelationalField from \"./RelationalField\";\nimport { manyToManyDescriptor } from \"../descriptors\";\nimport { m2mName, m2mToFieldName, m2mFromFieldName } from \"../utils\";\n/**\n * @memberof module:fields\n */\n\nexport var ManyToMany = /*#__PURE__*/function (_RelationalField) {\n  _inheritsLoose(ManyToMany, _RelationalField);\n\n  function ManyToMany() {\n    return _RelationalField.apply(this, arguments) || this;\n  }\n\n  var _proto = ManyToMany.prototype;\n\n  _proto.getDefault = function getDefault() {\n    return [];\n  };\n\n  _proto.getThroughModelName = function getThroughModelName(fieldName, model) {\n    return this.through || m2mName(model.modelName, fieldName);\n  };\n\n  _proto.createForwardsDescriptor = function createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n    return manyToManyDescriptor(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), false);\n  };\n\n  _proto.createBackwardsDescriptor = function createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n    return manyToManyDescriptor(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), true);\n  };\n\n  _proto.createBackwardsVirtualField = function createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n    var ThisField = this.getClass();\n    return new ThisField({\n      to: model.modelName,\n      relatedName: fieldName,\n      through: throughModel.modelName,\n      throughFields: this.getThroughFields(fieldName, model, toModel, throughModel)\n    });\n  };\n\n  _proto.createForwardsVirtualField = function createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n    var ThisField = this.getClass();\n    return new ThisField({\n      to: toModel.modelName,\n      relatedName: fieldName,\n      through: this.through,\n      throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n      as: this.as\n    });\n  };\n\n  _proto.getThroughFields = function getThroughFields(fieldName, model, toModel, throughModel) {\n    if (this.throughFields) {\n      var _this$throughFields = _slicedToArray(this.throughFields, 2),\n          fieldAName = _this$throughFields[0],\n          fieldBName = _this$throughFields[1];\n\n      var fieldA = throughModel.fields[fieldAName];\n      return {\n        to: fieldA.references(toModel) ? fieldAName : fieldBName,\n        from: fieldA.references(toModel) ? fieldBName : fieldAName\n      };\n    }\n\n    if (model.modelName === toModel.modelName) {\n      /**\n       * we have no way of determining the relationship's\n       * direction here, so we need to assume that the user\n       * did not use a custom through model\n       * see ORM#registerManyToManyModelsFor\n       */\n      return {\n        to: m2mToFieldName(toModel.modelName),\n        from: m2mFromFieldName(model.modelName)\n      };\n    }\n    /**\n     * determine which field references which model\n     * and infer the directions from that\n     */\n\n\n    var throughModelFieldReferencing = function throughModelFieldReferencing(otherModel) {\n      return Object.keys(throughModel.fields).find(function (someFieldName) {\n        return throughModel.fields[someFieldName].references(otherModel);\n      });\n    };\n\n    return {\n      to: throughModelFieldReferencing(toModel),\n      from: throughModelFieldReferencing(model)\n    };\n  };\n\n  _createClass(ManyToMany, [{\n    key: \"installsForwardsVirtualField\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return ManyToMany;\n}(RelationalField);\nexport default ManyToMany;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
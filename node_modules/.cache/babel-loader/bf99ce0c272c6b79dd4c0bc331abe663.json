{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport ops from \"immutable-ops\";\nimport { FILTER, EXCLUDE } from \"./constants\";\n/**\n * @module utils\n * @private\n */\n\n/** @private */\n\nfunction warnDeprecated(msg) {\n  var logger = typeof console.warn === \"function\" ? console.warn.bind(console) : console.log.bind(console);\n  return logger(msg);\n}\n/** @private */\n\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\n\n\nfunction m2mName(declarationModelName, fieldName) {\n  return declarationModelName + capitalize(fieldName);\n}\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\n\n\nfunction m2mFromFieldName(declarationModelName) {\n  return \"from\".concat(declarationModelName, \"Id\");\n}\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\n\n\nfunction m2mToFieldName(otherModelName) {\n  return \"to\".concat(otherModelName, \"Id\");\n}\n/** */\n\n\nfunction reverseFieldName(modelName) {\n  return modelName.toLowerCase() + \"Set\"; // eslint-disable-line prefer-template\n}\n/** @private */\n\n\nfunction querySetDelegatorFactory(methodName) {\n  return function querySetDelegator() {\n    var _this$getQuerySet;\n\n    return (_this$getQuerySet = this.getQuerySet())[methodName].apply(_this$getQuerySet, arguments);\n  };\n}\n/** @private */\n\n\nfunction querySetGetterDelegatorFactory(getterName) {\n  return function querySetGetterDelegator() {\n    var qs = this.getQuerySet();\n    return qs[getterName];\n  };\n}\n/** @private */\n\n\nfunction forEachSuperClass(subClass, func) {\n  var currClass = subClass;\n\n  while (currClass !== Function.prototype) {\n    func(currClass);\n    currClass = Object.getPrototypeOf(currClass);\n  }\n}\n/** */\n\n\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n  var leftToDefine = querySetClass.sharedMethods.slice(); // There is no way to get a property descriptor for the whole prototype chain;\n  // only from an objects own properties. Therefore we traverse the whole prototype\n  // chain for querySet.\n\n  forEachSuperClass(querySetClass, function (cls) {\n    for (var i = 0; i < leftToDefine.length; i++) {\n      var defined = false;\n      var methodName = leftToDefine[i];\n      var descriptor = Object.getOwnPropertyDescriptor(cls.prototype, methodName);\n\n      if (typeof descriptor !== \"undefined\") {\n        if (typeof descriptor.get !== \"undefined\") {\n          descriptor.get = querySetGetterDelegatorFactory(methodName);\n          Object.defineProperty(modelClass, methodName, descriptor);\n        } else {\n          modelClass[methodName] = querySetDelegatorFactory(methodName);\n        }\n\n        defined = true;\n      }\n\n      if (defined) {\n        leftToDefine.splice(i--, 1);\n      }\n    }\n  });\n}\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\n\n\nfunction normalizeEntity(entity) {\n  if (entity !== null && typeof entity !== \"undefined\" && typeof entity.getId === \"function\") {\n    return entity.getId();\n  }\n\n  return entity;\n}\n/** */\n\n\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n  return [\"Reverse field \".concat(backwardsFieldName, \" already defined\"), \" on model \".concat(toModelName, \". To fix, set a custom related\"), \" name on \".concat(modelName, \".\").concat(fieldName, \".\")].join(\"\");\n}\n/**\n * Fastest way to check if two objects are equal.\n * Object and array values have to be referentially equal.\n */\n\n\nfunction objectShallowEquals(a, b) {\n  var entriesInA = Object.entries(Object(a));\n\n  if (entriesInA.length !== Object.keys(b).length) {\n    return false;\n  }\n\n  return entriesInA.every(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return b.hasOwnProperty(key) && b[key] === value;\n  });\n}\n/** */\n\n\nfunction arrayDiffActions(sourceArr, targetArr) {\n  var itemsInBoth = sourceArr.filter(function (item) {\n    return targetArr.includes(item);\n  });\n  var deleteItems = sourceArr.filter(function (item) {\n    return !itemsInBoth.includes(item);\n  });\n  var addItems = targetArr.filter(function (item) {\n    return !itemsInBoth.includes(item);\n  });\n\n  if (deleteItems.length || addItems.length) {\n    return {\n      \"delete\": deleteItems,\n      add: addItems\n    };\n  }\n\n  return null;\n}\n\nvar getBatchToken = ops.getBatchToken;\n/**\n * @return boolean\n */\n\nfunction clauseFiltersByAttribute(_ref3, attribute) {\n  var type = _ref3.type,\n      payload = _ref3.payload;\n  if (type !== FILTER) return false;\n\n  if (_typeof(payload) !== \"object\") {\n    /**\n     * payload could also be a function in which case\n     * we would have no way of knowing what it does,\n     * so we default to false for non-objects\n     */\n    return false;\n  }\n\n  if (!payload.hasOwnProperty(attribute)) return false;\n  var attributeValue = payload[attribute];\n  if (attributeValue === null) return false;\n  if (attributeValue === undefined) return false;\n  return true;\n}\n/**\n * @return boolean\n */\n\n\nfunction clauseReducesResultSetSize(_ref4) {\n  var type = _ref4.type;\n  return [FILTER, EXCLUDE].includes(type);\n}\n/**\n * @param {Object} object\n * @return Object\n */\n\n\nfunction mapValues(object, func) {\n  return Object.entries(object).reduce(function (newObject, _ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        key = _ref6[0],\n        value = _ref6[1];\n\n    newObject[key] = func(value);\n    return newObject;\n  }, {});\n}\n/** */\n\n\nfunction normalizeModelReference(modelNameOrClass) {\n  if (!modelNameOrClass || typeof modelNameOrClass === \"string\") {\n    return modelNameOrClass;\n  }\n\n  return modelNameOrClass.modelName;\n}\n\nexport { attachQuerySetMethods, m2mName, m2mFromFieldName, m2mToFieldName, reverseFieldName, normalizeEntity, reverseFieldErrorMessage, objectShallowEquals, ops, arrayDiffActions, getBatchToken, clauseFiltersByAttribute, clauseReducesResultSetSize, warnDeprecated, mapValues, normalizeModelReference };","map":{"version":3,"names":["_typeof","_slicedToArray","ops","FILTER","EXCLUDE","warnDeprecated","msg","logger","console","warn","bind","log","capitalize","string","charAt","toUpperCase","slice","m2mName","declarationModelName","fieldName","m2mFromFieldName","concat","m2mToFieldName","otherModelName","reverseFieldName","modelName","toLowerCase","querySetDelegatorFactory","methodName","querySetDelegator","_this$getQuerySet","getQuerySet","apply","arguments","querySetGetterDelegatorFactory","getterName","querySetGetterDelegator","qs","forEachSuperClass","subClass","func","currClass","Function","prototype","Object","getPrototypeOf","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","cls","i","length","defined","descriptor","getOwnPropertyDescriptor","get","defineProperty","splice","normalizeEntity","entity","getId","reverseFieldErrorMessage","toModelName","backwardsFieldName","join","objectShallowEquals","a","b","entriesInA","entries","keys","every","_ref","_ref2","key","value","hasOwnProperty","arrayDiffActions","sourceArr","targetArr","itemsInBoth","filter","item","includes","deleteItems","addItems","add","getBatchToken","clauseFiltersByAttribute","_ref3","attribute","type","payload","attributeValue","undefined","clauseReducesResultSetSize","_ref4","mapValues","object","reduce","newObject","_ref5","_ref6","normalizeModelReference","modelNameOrClass"],"sources":["/Users/developer/task/task3/node_modules/redux-orm/es/utils.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport ops from \"immutable-ops\";\nimport { FILTER, EXCLUDE } from \"./constants\";\n/**\n * @module utils\n * @private\n */\n\n/** @private */\n\nfunction warnDeprecated(msg) {\n  var logger = typeof console.warn === \"function\" ? console.warn.bind(console) : console.log.bind(console);\n  return logger(msg);\n}\n/** @private */\n\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\n\n\nfunction m2mName(declarationModelName, fieldName) {\n  return declarationModelName + capitalize(fieldName);\n}\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\n\n\nfunction m2mFromFieldName(declarationModelName) {\n  return \"from\".concat(declarationModelName, \"Id\");\n}\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\n\n\nfunction m2mToFieldName(otherModelName) {\n  return \"to\".concat(otherModelName, \"Id\");\n}\n/** */\n\n\nfunction reverseFieldName(modelName) {\n  return modelName.toLowerCase() + \"Set\"; // eslint-disable-line prefer-template\n}\n/** @private */\n\n\nfunction querySetDelegatorFactory(methodName) {\n  return function querySetDelegator() {\n    var _this$getQuerySet;\n\n    return (_this$getQuerySet = this.getQuerySet())[methodName].apply(_this$getQuerySet, arguments);\n  };\n}\n/** @private */\n\n\nfunction querySetGetterDelegatorFactory(getterName) {\n  return function querySetGetterDelegator() {\n    var qs = this.getQuerySet();\n    return qs[getterName];\n  };\n}\n/** @private */\n\n\nfunction forEachSuperClass(subClass, func) {\n  var currClass = subClass;\n\n  while (currClass !== Function.prototype) {\n    func(currClass);\n    currClass = Object.getPrototypeOf(currClass);\n  }\n}\n/** */\n\n\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n  var leftToDefine = querySetClass.sharedMethods.slice(); // There is no way to get a property descriptor for the whole prototype chain;\n  // only from an objects own properties. Therefore we traverse the whole prototype\n  // chain for querySet.\n\n  forEachSuperClass(querySetClass, function (cls) {\n    for (var i = 0; i < leftToDefine.length; i++) {\n      var defined = false;\n      var methodName = leftToDefine[i];\n      var descriptor = Object.getOwnPropertyDescriptor(cls.prototype, methodName);\n\n      if (typeof descriptor !== \"undefined\") {\n        if (typeof descriptor.get !== \"undefined\") {\n          descriptor.get = querySetGetterDelegatorFactory(methodName);\n          Object.defineProperty(modelClass, methodName, descriptor);\n        } else {\n          modelClass[methodName] = querySetDelegatorFactory(methodName);\n        }\n\n        defined = true;\n      }\n\n      if (defined) {\n        leftToDefine.splice(i--, 1);\n      }\n    }\n  });\n}\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\n\n\nfunction normalizeEntity(entity) {\n  if (entity !== null && typeof entity !== \"undefined\" && typeof entity.getId === \"function\") {\n    return entity.getId();\n  }\n\n  return entity;\n}\n/** */\n\n\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n  return [\"Reverse field \".concat(backwardsFieldName, \" already defined\"), \" on model \".concat(toModelName, \". To fix, set a custom related\"), \" name on \".concat(modelName, \".\").concat(fieldName, \".\")].join(\"\");\n}\n/**\n * Fastest way to check if two objects are equal.\n * Object and array values have to be referentially equal.\n */\n\n\nfunction objectShallowEquals(a, b) {\n  var entriesInA = Object.entries(Object(a));\n\n  if (entriesInA.length !== Object.keys(b).length) {\n    return false;\n  }\n\n  return entriesInA.every(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return b.hasOwnProperty(key) && b[key] === value;\n  });\n}\n/** */\n\n\nfunction arrayDiffActions(sourceArr, targetArr) {\n  var itemsInBoth = sourceArr.filter(function (item) {\n    return targetArr.includes(item);\n  });\n  var deleteItems = sourceArr.filter(function (item) {\n    return !itemsInBoth.includes(item);\n  });\n  var addItems = targetArr.filter(function (item) {\n    return !itemsInBoth.includes(item);\n  });\n\n  if (deleteItems.length || addItems.length) {\n    return {\n      \"delete\": deleteItems,\n      add: addItems\n    };\n  }\n\n  return null;\n}\n\nvar getBatchToken = ops.getBatchToken;\n/**\n * @return boolean\n */\n\nfunction clauseFiltersByAttribute(_ref3, attribute) {\n  var type = _ref3.type,\n      payload = _ref3.payload;\n  if (type !== FILTER) return false;\n\n  if (_typeof(payload) !== \"object\") {\n    /**\n     * payload could also be a function in which case\n     * we would have no way of knowing what it does,\n     * so we default to false for non-objects\n     */\n    return false;\n  }\n\n  if (!payload.hasOwnProperty(attribute)) return false;\n  var attributeValue = payload[attribute];\n  if (attributeValue === null) return false;\n  if (attributeValue === undefined) return false;\n  return true;\n}\n/**\n * @return boolean\n */\n\n\nfunction clauseReducesResultSetSize(_ref4) {\n  var type = _ref4.type;\n  return [FILTER, EXCLUDE].includes(type);\n}\n/**\n * @param {Object} object\n * @return Object\n */\n\n\nfunction mapValues(object, func) {\n  return Object.entries(object).reduce(function (newObject, _ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        key = _ref6[0],\n        value = _ref6[1];\n\n    newObject[key] = func(value);\n    return newObject;\n  }, {});\n}\n/** */\n\n\nfunction normalizeModelReference(modelNameOrClass) {\n  if (!modelNameOrClass || typeof modelNameOrClass === \"string\") {\n    return modelNameOrClass;\n  }\n\n  return modelNameOrClass.modelName;\n}\n\nexport { attachQuerySetMethods, m2mName, m2mFromFieldName, m2mToFieldName, reverseFieldName, normalizeEntity, reverseFieldErrorMessage, objectShallowEquals, ops, arrayDiffActions, getBatchToken, clauseFiltersByAttribute, clauseReducesResultSetSize, warnDeprecated, mapValues, normalizeModelReference };"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\"; // import { createPost } from \"./modelDucks/Post\";\n// import { createUser } from \"./modelDucks/User\";\n\nimport { reducer as ormReducer } from \"./orm\";\nconst initialState = {\n  num: 0\n};\nexport const numReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      return { ...state,\n        num: state.num + 1\n      };\n\n    default:\n      return state;\n  }\n};\nexport const add = () => ({\n  type: \"ADD\"\n});\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n    numReducer: numReducer\n  }\n}); // add some initial fake data\n\nlet userList = [];\nlet postList = []; // const fetchUser = async () => {\n//   try {\n//     const userRes = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     userList = userRes.data;\n//     userList.forEach((user, idx) => {\n//       store.dispatch(\n//         createUser({\n//           id: idx + 1,\n//           name: user.name,\n//           username: user.username,\n//           email: user.email,\n//           address: user.address,\n//           company: user.company,\n//           phone: user.phone,\n//           website: user.website,\n//         })\n//       );\n//     });\n//     console.log(\"##fetchUser end\");\n//   } catch (e) {\n//     console.log(\"##error\", e);\n//   }\n// };\n//\n\nconst fetchComment = async itemId => {\n  try {\n    for (let idx = 0; idx < 200; idx++) {\n      const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`);\n      const commentList = commentRes.data;\n      commentList.forEach(comment => {\n        store.dispatch(createComment({\n          id: comment.id,\n          postId: comment.postId,\n          body: comment.body,\n          email: comment.email,\n          name: comment.name\n        }));\n      });\n    }\n\n    console.log(\"##fetchComment end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  // fetchUser();\n  // fetchPost();\n  fetchComment();\n};\n\ninit();\nexport default store;","map":{"version":3,"names":["configureStore","axios","reducer","currentPostReducer","createComment","ormReducer","initialState","num","numReducer","state","action","type","add","store","orm","currentPost","userList","postList","fetchComment","itemId","idx","commentRes","get","commentList","data","forEach","comment","dispatch","id","postId","body","email","name","console","log","e","init"],"sources":["/Users/developer/task/task3/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\n// import { createPost } from \"./modelDucks/Post\";\n// import { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\n\nconst initialState = {\n  num: 0,\n};\nexport const numReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      return {\n        ...state,\n        num: state.num + 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const add = () => ({\n  type: \"ADD\",\n});\n\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n    numReducer: numReducer,\n  },\n});\n\n// add some initial fake data\nlet userList = [];\nlet postList = [];\n// const fetchUser = async () => {\n//   try {\n//     const userRes = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     userList = userRes.data;\n\n//     userList.forEach((user, idx) => {\n//       store.dispatch(\n//         createUser({\n//           id: idx + 1,\n//           name: user.name,\n//           username: user.username,\n//           email: user.email,\n//           address: user.address,\n//           company: user.company,\n//           phone: user.phone,\n//           website: user.website,\n//         })\n//       );\n//     });\n//     console.log(\"##fetchUser end\");\n//   } catch (e) {\n//     console.log(\"##error\", e);\n//   }\n// };\n\n//\n\nconst fetchComment = async (itemId) => {\n  try {\n    for (let idx = 0; idx < 200; idx++) {\n      const commentRes = await axios.get(\n        `https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`\n      );\n      const commentList = commentRes.data;\n\n      commentList.forEach((comment) => {\n        store.dispatch(\n          createComment({\n            id: comment.id,\n            postId: comment.postId,\n            body: comment.body,\n            email: comment.email,\n            name: comment.name,\n          })\n        );\n      });\n    }\n    console.log(\"##fetchComment end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  // fetchUser();\n  // fetchPost();\n  fetchComment();\n};\n\ninit();\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,qBAA9C;AACA,SAASC,aAAT,QAA8B,sBAA9B,C,CACA;AACA;;AACA,SAASF,OAAO,IAAIG,UAApB,QAAsC,OAAtC;AAEA,MAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE;AADc,CAArB;AAGA,OAAO,MAAMC,UAAU,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBH,YAAyB;EAAA,IAAXI,MAAW;;EAC1D,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,KAAL;MACE,OAAO,EACL,GAAGF,KADE;QAELF,GAAG,EAAEE,KAAK,CAACF,GAAN,GAAY;MAFZ,CAAP;;IAIF;MACE,OAAOE,KAAP;EAPJ;AASD,CAVM;AAYP,OAAO,MAAMG,GAAG,GAAG,OAAO;EACxBD,IAAI,EAAE;AADkB,CAAP,CAAZ;AAIP,MAAME,KAAK,GAAGb,cAAc,CAAC;EAC3BE,OAAO,EAAE;IACPY,GAAG,EAAET,UADE;IAEPU,WAAW,EAAEZ,kBAFN;IAGPK,UAAU,EAAEA;EAHL;AADkB,CAAD,CAA5B,C,CAQA;;AACA,IAAIQ,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,EAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,YAAY,GAAG,MAAOC,MAAP,IAAkB;EACrC,IAAI;IACF,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,GAAxB,EAA6BA,GAAG,EAAhC,EAAoC;MAClC,MAAMC,UAAU,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CACtB,wDAAuDF,GAAG,GAAG,CAAE,EADzC,CAAzB;MAGA,MAAMG,WAAW,GAAGF,UAAU,CAACG,IAA/B;MAEAD,WAAW,CAACE,OAAZ,CAAqBC,OAAD,IAAa;QAC/Bb,KAAK,CAACc,QAAN,CACEvB,aAAa,CAAC;UACZwB,EAAE,EAAEF,OAAO,CAACE,EADA;UAEZC,MAAM,EAAEH,OAAO,CAACG,MAFJ;UAGZC,IAAI,EAAEJ,OAAO,CAACI,IAHF;UAIZC,KAAK,EAAEL,OAAO,CAACK,KAJH;UAKZC,IAAI,EAAEN,OAAO,CAACM;QALF,CAAD,CADf;MASD,CAVD;IAWD;;IACDC,OAAO,CAACC,GAAR,CAAY,oBAAZ;EACD,CApBD,CAoBE,OAAOC,CAAP,EAAU;IACVF,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,CAAvB;EACD;AACF,CAxBD;;AA0BA,MAAMC,IAAI,GAAG,MAAM;EACjB;EACA;EACAlB,YAAY;AACb,CAJD;;AAMAkB,IAAI;AACJ,eAAevB,KAAf"},"metadata":{},"sourceType":"module"}
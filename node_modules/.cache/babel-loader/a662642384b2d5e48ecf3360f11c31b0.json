{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Session from \"./Session\";\nimport QuerySet from \"./QuerySet\";\nimport { attr } from \"./fields\";\nimport ForeignKey from \"./fields/ForeignKey\";\nimport ManyToMany from \"./fields/ManyToMany\";\nimport OneToOne from \"./fields/OneToOne\";\nimport { CREATE, UPDATE, DELETE, FILTER } from \"./constants\";\nimport { normalizeEntity, arrayDiffActions, objectShallowEquals, warnDeprecated, m2mName } from \"./utils\";\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\n\nfunction getByIdQuery(modelInstance) {\n  var modelClass = modelInstance.getClass();\n  var idAttribute = modelClass.idAttribute,\n      modelName = modelClass.modelName;\n  return {\n    table: modelName,\n    clauses: [{\n      type: FILTER,\n      payload: _defineProperty({}, idAttribute, modelInstance.getId())\n    }]\n  };\n}\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\n\n\nvar Model = /*#__PURE__*/function () {\n  /**\n   * Creates a Model instance from it's properties.\n   * Don't use this to create a new record; Use the static method {@link Model#create}.\n   * @param  {Object} props - the properties to instantiate with\n   */\n  function Model(props) {\n    this._initFields(props);\n  }\n\n  var _proto = Model.prototype;\n\n  _proto._initFields = function _initFields(props) {\n    var _this = this;\n\n    var propsObj = Object(props);\n    this._fields = _objectSpread({}, propsObj);\n    Object.keys(propsObj).forEach(function (fieldName) {\n      // In this case, we got a prop that wasn't defined as a field.\n      // Assuming it's an arbitrary data field, making an instance-specific\n      // descriptor for it.\n      // Using the in operator as the property could be defined anywhere\n      // on the prototype chain.\n      if (!(fieldName in _this)) {\n        Object.defineProperty(_this, fieldName, {\n          get: function get() {\n            return _this._fields[fieldName];\n          },\n          set: function set(value) {\n            return _this.set(fieldName, value);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n  };\n\n  Model.toString = function toString() {\n    return \"ModelClass: \".concat(this.modelName);\n  }\n  /**\n   * Returns the options object passed to the database for the table that represents\n   * this Model class.\n   *\n   * Returns an empty object by default, which means the database\n   * will use default options. You can either override this function to return the options\n   * you want to use, or assign the options object as a static property of the same name to the\n   * Model class.\n   *\n   * @return {Object} the options object passed to the database for the table\n   *                  representing this Model class.\n   */\n  ;\n\n  Model.options = function options() {\n    return {};\n  }\n  /**\n   * Manually mark individual instances as accessed.\n   * This allows invalidating selector memoization within mutable sessions.\n   *\n   * @param {Array.<*>} ids - Array of primary key values\n   * @return {undefined}\n   */\n  ;\n\n  Model.markAccessed = function markAccessed(ids) {\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to mark rows of the \".concat(this.modelName, \" model as accessed without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].markAccessed` instead.\")].join(\"\"));\n    }\n\n    this.session.markAccessed(this.modelName, ids);\n  }\n  /**\n   * Manually mark this model's table as scanned.\n   * This allows invalidating selector memoization within mutable sessions.\n   *\n   * @return {undefined}\n   */\n  ;\n\n  Model.markFullTableScanned = function markFullTableScanned() {\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to mark the \".concat(this.modelName, \" model as full table scanned without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].markFullTableScanned` instead.\")].join(\"\"));\n    }\n\n    this.session.markFullTableScanned(this.modelName);\n  }\n  /**\n   * Manually mark indexes as accessed.\n   * This allows invalidating selector memoization within mutable sessions.\n   *\n   * @param {Array.<Array.<*,*>>} indexes - Array of column-value pairs\n   * @return {undefined}\n   */\n  ;\n\n  Model.markAccessedIndexes = function markAccessedIndexes(indexes) {\n    var _this2 = this;\n\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to mark indexes for the \".concat(this.modelName, \" model as accessed without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].markAccessedIndexes` instead.\")].join(\"\"));\n    }\n\n    this.session.markAccessedIndexes(indexes.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          attribute = _ref2[0],\n          value = _ref2[1];\n\n      return [_this2.modelName, attribute, value];\n    }));\n  }\n  /**\n   * Returns the id attribute of this {@link Model}.\n   *\n   * @return {string} The id attribute of this {@link Model}.\n   */\n  ;\n  /**\n   * Connect the model class to a {@link Session}.\n   *\n   * @private\n   * @param  {Session} session - The session to connect to.\n   */\n\n\n  Model.connect = function connect(session) {\n    if (!(session instanceof Session)) {\n      throw new Error(\"A model can only be connected to instances of Session.\");\n    }\n\n    this._session = session;\n  }\n  /**\n   * Get the current {@link Session} instance.\n   *\n   * @private\n   * @return {Session} The current {@link Session} instance.\n   */\n  ;\n  /**\n   * Returns an instance of the model's `querySetClass` field.\n   * By default, this will be an empty {@link QuerySet}.\n   *\n   * @return {Object} An instance of the model's `querySetClass`.\n   */\n\n\n  Model.getQuerySet = function getQuerySet() {\n    var QuerySetClass = this.querySetClass;\n    return new QuerySetClass(this);\n  }\n  /**\n   * @return {undefined}\n   */\n  ;\n\n  Model.invalidateClassCache = function invalidateClassCache() {\n    this.isSetUp = undefined;\n    this.virtualFields = {};\n  }\n  /**\n   * @see {@link Model.getQuerySet}\n   */\n  ;\n  /**\n   * Returns parameters to be passed to {@link Table} instance.\n   *\n   * @private\n   */\n\n\n  Model.tableOptions = function tableOptions() {\n    if (typeof this.backend === \"function\") {\n      warnDeprecated(\"`Model.backend` has been deprecated. Please rename to `.options`.\");\n      return this.backend();\n    }\n\n    if (this.backend) {\n      warnDeprecated(\"`Model.backend` has been deprecated. Please rename to `.options`.\");\n      return this.backend;\n    }\n\n    if (typeof this.options === \"function\") {\n      return this.options();\n    }\n\n    return this.options;\n  }\n  /**\n   * Creates a new record in the database, instantiates a {@link Model} and returns it.\n   *\n   * If you pass values for many-to-many fields, instances are created on the through\n   * model as well.\n   *\n   * @param  {Object} userProps - the new {@link Model}'s properties.\n   * @return {Model} a new {@link Model} instance.\n   */\n  ;\n\n  Model.create = function create(userProps) {\n    var _this3 = this;\n\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to create a \".concat(this.modelName, \" model instance without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].create` instead.\")].join(\"\"));\n    }\n\n    var props = _objectSpread({}, userProps);\n\n    var m2mRelations = {};\n    var declaredFieldNames = Object.keys(this.fields);\n    var declaredVirtualFieldNames = Object.keys(this.virtualFields);\n    declaredFieldNames.forEach(function (key) {\n      var field = _this3.fields[key];\n      var valuePassed = userProps.hasOwnProperty(key);\n\n      if (!(field instanceof ManyToMany)) {\n        if (valuePassed) {\n          var value = userProps[key];\n          props[key] = normalizeEntity(value);\n        } else if (field.getDefault) {\n          props[key] = field.getDefault();\n        }\n      } else if (valuePassed) {\n        // Save for later processing\n        m2mRelations[key] = userProps[key];\n\n        if (!field.as) {\n          /**\n           * The relationship does not have an accessor\n           * Discard the value from props as the field will be populated later with instances\n           * from the target models when refreshing the M2M relations.\n           * If the relationship does have an accessor (`as`) field then we do want to keep this\n           * original value in the props to expose the raw list of IDs from the instance.\n           */\n          delete props[key];\n        }\n      }\n    }); // add backward many-many if required\n\n    declaredVirtualFieldNames.forEach(function (key) {\n      if (!m2mRelations.hasOwnProperty(key)) {\n        var field = _this3.virtualFields[key];\n\n        if (userProps.hasOwnProperty(key) && field instanceof ManyToMany) {\n          // If a value is supplied for a ManyToMany field,\n          // discard them from props and save for later processing.\n          m2mRelations[key] = userProps[key];\n          delete props[key];\n        }\n      }\n    });\n    var newEntry = this.session.applyUpdate({\n      action: CREATE,\n      table: this.modelName,\n      payload: props\n    });\n    var ThisModel = this;\n    var instance = new ThisModel(newEntry);\n\n    instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n\n\n    return instance;\n  }\n  /**\n   * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n   *\n   * If you pass values for many-to-many fields, instances are created on the through\n   * model as well.\n   *\n   * @param  {Object} userProps - the required {@link Model}'s properties.\n   * @return {Model} a {@link Model} instance.\n   */\n  ;\n\n  Model.upsert = function upsert(userProps) {\n    if (typeof this.session === \"undefined\") {\n      throw new Error([\"Tried to upsert a \".concat(this.modelName, \" model instance without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].upsert` instead.\")].join(\"\"));\n    }\n\n    var idAttribute = this.idAttribute;\n\n    if (userProps.hasOwnProperty(idAttribute)) {\n      var id = userProps[idAttribute];\n\n      if (this.idExists(id)) {\n        var model = this.withId(id);\n        model.update(userProps);\n        return model;\n      }\n    }\n\n    return this.create(userProps);\n  }\n  /**\n   * Returns a {@link Model} instance for the object with id `id`.\n   * Returns `null` if the model has no instance with id `id`.\n   *\n   * You can use {@link Model#idExists} to check for existence instead.\n   *\n   * @param  {*} id - the `id` of the object to get\n   * @throws If object with id `id` doesn't exist\n   * @return {Model|null} {@link Model} instance with id `id`\n   */\n  ;\n\n  Model.withId = function withId(id) {\n    return this.get(_defineProperty({}, this.idAttribute, id));\n  }\n  /**\n   * Returns a boolean indicating if an entity\n   * with the id `id` exists in the state.\n   *\n   * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n   * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n   *\n   * @since 0.11.0\n   */\n  ;\n\n  Model.idExists = function idExists(id) {\n    return this.exists(_defineProperty({}, this.idAttribute, id));\n  }\n  /**\n   * Returns a boolean indicating if an entity\n   * with the given props exists in the state.\n   *\n   * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n   * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n   */\n  ;\n\n  Model.exists = function exists(lookupObj) {\n    if (typeof this.session === \"undefined\") {\n      throw new Error([\"Tried to check if a \".concat(this.modelName, \" model instance exists without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].exists` instead.\")].join(\"\"));\n    }\n\n    return Boolean(this._findDatabaseRows(lookupObj).length);\n  }\n  /**\n   * Gets the {@link Model} instance that matches properties in `lookupObj`.\n   * Throws an error if {@link Model} if multiple records match\n   * the properties.\n   *\n   * @param  {Object} lookupObj - the properties used to match a single entity.\n   * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n   * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n   */\n  ;\n\n  Model.get = function get(lookupObj) {\n    var ThisModel = this;\n\n    var rows = this._findDatabaseRows(lookupObj);\n\n    if (rows.length === 0) {\n      return null;\n    }\n\n    if (rows.length > 1) {\n      throw new Error(\"Expected to find a single row in `\".concat(this.modelName, \".get`. Found \").concat(rows.length, \".\"));\n    }\n\n    return new ThisModel(rows[0]);\n  }\n  /**\n   * Gets the {@link Model} class or subclass constructor (the class that\n   * instantiated this instance).\n   *\n   * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n   *                 this instance.\n   */\n  ;\n\n  _proto.getClass = function getClass() {\n    return this.constructor;\n  }\n  /**\n   * Gets the id value of the current instance by looking up the id attribute.\n   * @return {*} The id value of the current instance.\n   */\n  ;\n\n  _proto.getId = function getId() {\n    return this._fields[this.getClass().idAttribute];\n  }\n  /**\n   * Returns a reference to the plain JS object in the store.\n   * It contains all the properties that you pass when creating the model,\n   * except for primary keys of many-to-many relationships with a custom accessor.\n   *\n   * Make sure never to mutate this.\n   *\n   * @return {Object} a reference to the plain JS object in the store\n   */\n  ;\n  /**\n   * Finds all rows in this model's table that match the given `lookupObj`.\n   * If no `lookupObj` is passed, all rows in the model's table will be returned.\n   *\n   * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n   * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n   * @private\n   */\n\n\n  Model._findDatabaseRows = function _findDatabaseRows(lookupObj) {\n    var querySpec = {\n      table: this.modelName\n    };\n\n    if (lookupObj) {\n      querySpec.clauses = [{\n        type: FILTER,\n        payload: lookupObj\n      }];\n    }\n\n    return this.session.query(querySpec).rows;\n  }\n  /**\n   * Returns a string representation of the {@link Model} instance.\n   *\n   * @return {string} A string representation of this {@link Model} instance.\n   */\n  ;\n\n  _proto.toString = function toString() {\n    var _this4 = this;\n\n    var ThisModel = this.getClass();\n    var className = ThisModel.modelName;\n    var fieldNames = Object.keys(ThisModel.fields);\n    var fields = fieldNames.map(function (fieldName) {\n      var field = ThisModel.fields[fieldName];\n\n      if (field instanceof ManyToMany) {\n        var ids = _this4[fieldName].toModelArray().map(function (model) {\n          return model.getId();\n        });\n\n        return \"\".concat(fieldName, \": [\").concat(ids.join(\", \"), \"]\");\n      }\n\n      var val = _this4._fields[fieldName];\n      return \"\".concat(fieldName, \": \").concat(val);\n    }).join(\", \");\n    return \"\".concat(className, \": {\").concat(fields, \"}\");\n  }\n  /**\n   * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n   * Equality is determined by shallow comparing their attributes.\n   *\n   * This equality is used when you call {@link Model#update}.\n   * You can prevent model updates by returning `true` here.\n   * However, a model will always be updated if its relationships are changed.\n   *\n   * @param  {Model} otherModel - a {@link Model} instance to compare\n   * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n   */\n  ;\n\n  _proto.equals = function equals(otherModel) {\n    // eslint-disable-next-line no-underscore-dangle\n    return objectShallowEquals(this._fields, otherModel._fields);\n  }\n  /**\n   * Updates a property name to given value for this {@link Model} instance.\n   * The values are immediately committed to the database.\n   *\n   * @param {string} propertyName - name of the property to set\n   * @param {*} value - value assigned to the property\n   * @return {undefined}\n   */\n  ;\n\n  _proto.set = function set(propertyName, value) {\n    this.update(_defineProperty({}, propertyName, value));\n  }\n  /**\n   * Assigns multiple fields and corresponding values to this {@link Model} instance.\n   * The updates are immediately committed to the database.\n   *\n   * @param  {Object} userMergeObj - an object that will be merged with this instance.\n   * @return {undefined}\n   */\n  ;\n\n  _proto.update = function update(userMergeObj) {\n    var ThisModel = this.getClass();\n\n    if (typeof ThisModel.session === \"undefined\") {\n      throw new Error([\"Tried to update a \".concat(ThisModel.modelName, \" model instance without a session. \"), \"You cannot call `.update` on an instance that you did not receive from the database.\"].join(\"\"));\n    }\n\n    var mergeObj = _objectSpread({}, userMergeObj);\n\n    var fields = ThisModel.fields,\n        virtualFields = ThisModel.virtualFields;\n    var m2mRelations = {}; // If an array of entities or id's is supplied for a\n    // many-to-many related field, clear the old relations\n    // and add the new ones.\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n    for (var mergeKey in mergeObj) {\n      var isRealField = fields.hasOwnProperty(mergeKey);\n\n      if (isRealField) {\n        var field = fields[mergeKey];\n\n        if (field instanceof ForeignKey || field instanceof OneToOne) {\n          // update one-one/fk relations\n          mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n        } else if (field instanceof ManyToMany) {\n          // field is forward relation\n          m2mRelations[mergeKey] = mergeObj[mergeKey];\n\n          if (!field.as) {\n            /**\n             * The relationship does not have an accessor\n             * Discard the value from props as the field will be populated later with instances\n             * from the target models when refreshing the M2M relations.\n             * If the relationship does have an accessor (`as`) field then we do want to keep this\n             * original value in the props to expose the raw list of IDs from the instance.\n             */\n            delete mergeObj[mergeKey];\n          }\n        }\n      } else if (virtualFields.hasOwnProperty(mergeKey)) {\n        var _field = virtualFields[mergeKey];\n\n        if (_field instanceof ManyToMany) {\n          // field is backward relation\n          m2mRelations[mergeKey] = mergeObj[mergeKey];\n          delete mergeObj[mergeKey];\n        }\n      }\n    }\n\n    var mergedFields = _objectSpread(_objectSpread({}, this._fields), mergeObj);\n\n    var updatedModel = new ThisModel(mergedFields); // only update fields if they have changed (referentially)\n\n    if (!this.equals(updatedModel)) {\n      this._initFields(mergedFields);\n\n      ThisModel.session.applyUpdate({\n        action: UPDATE,\n        query: getByIdQuery(this),\n        payload: mergeObj\n      });\n    } // update virtual fields\n\n\n    this._refreshMany2Many(m2mRelations);\n  }\n  /**\n   * Updates {@link Model} instance attributes to reflect the\n   * database state in the current session.\n   * @return {undefined}\n   */\n  ;\n\n  _proto.refreshFromState = function refreshFromState() {\n    this._initFields(this.ref);\n  }\n  /**\n   * Deletes the record for this {@link Model} instance.\n   * You'll still be able to access fields and values on the instance.\n   *\n   * @return {undefined}\n   */\n  ;\n\n  _proto[\"delete\"] = function _delete() {\n    var ThisModel = this.getClass();\n\n    if (typeof ThisModel.session === \"undefined\") {\n      throw new Error([\"Tried to delete a \".concat(ThisModel.modelName, \" model instance without a session. \"), \"You cannot call `.delete` on an instance that you did not receive from the database.\"].join(\"\"));\n    }\n\n    this._onDelete();\n\n    ThisModel.session.applyUpdate({\n      action: DELETE,\n      query: getByIdQuery(this)\n    });\n  }\n  /**\n   * Update many-many relations for model.\n   * @param relations\n   * @return undefined\n   * @private\n   */\n  ;\n\n  _proto._refreshMany2Many = function _refreshMany2Many(relations) {\n    var _this5 = this;\n\n    var ThisModel = this.getClass();\n    var fields = ThisModel.fields,\n        virtualFields = ThisModel.virtualFields,\n        modelName = ThisModel.modelName;\n    Object.keys(relations).forEach(function (name) {\n      var reverse = !fields.hasOwnProperty(name);\n      var field = virtualFields[name];\n      var values = relations[name];\n\n      if (!Array.isArray(values)) {\n        throw new TypeError(\"Failed to resolve many-to-many relationship: \".concat(modelName, \"[\").concat(name, \"] must be an array (passed: \").concat(values, \")\"));\n      }\n\n      var normalizedNewIds = values.map(normalizeEntity);\n\n      var uniqueIds = _toConsumableArray(new Set(normalizedNewIds));\n\n      if (normalizedNewIds.length !== uniqueIds.length) {\n        throw new Error(\"Found duplicate id(s) when passing \\\"\".concat(normalizedNewIds, \"\\\" to \").concat(ThisModel.modelName, \".\").concat(name, \" value\"));\n      }\n\n      var throughModelName = field.through || m2mName(ThisModel.modelName, name);\n      var ThroughModel = ThisModel.session[throughModelName];\n      var fromField;\n      var toField;\n\n      if (!reverse) {\n        var _field$throughFields = field.throughFields;\n        fromField = _field$throughFields.from;\n        toField = _field$throughFields.to;\n      } else {\n        var _field$throughFields2 = field.throughFields;\n        toField = _field$throughFields2.from;\n        fromField = _field$throughFields2.to;\n      }\n\n      var currentIds = ThroughModel.filter(function (through) {\n        return through[fromField] === _this5[ThisModel.idAttribute];\n      }).toRefArray().map(function (ref) {\n        return ref[toField];\n      });\n      var diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n      if (diffActions) {\n        var idsToDelete = diffActions[\"delete\"],\n            idsToAdd = diffActions.add;\n\n        if (idsToDelete.length > 0) {\n          var _this6;\n\n          (_this6 = _this5[field.as || name]).remove.apply(_this6, _toConsumableArray(idsToDelete));\n        }\n\n        if (idsToAdd.length > 0) {\n          var _this7;\n\n          (_this7 = _this5[field.as || name]).add.apply(_this7, _toConsumableArray(idsToAdd));\n        }\n      }\n    });\n  }\n  /**\n   * @return {undefined}\n   * @private\n   */\n  ;\n\n  _proto._onDelete = function _onDelete() {\n    var _this$getClass = this.getClass(),\n        virtualFields = _this$getClass.virtualFields; // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n\n    for (var key in virtualFields) {\n      var field = virtualFields[key];\n\n      if (field instanceof ManyToMany) {\n        // Delete any many-to-many rows the entity is included in.\n        var descriptorKey = field.as || key;\n        this[descriptorKey].clear();\n      } else if (field instanceof ForeignKey) {\n        var relatedQs = this[key];\n\n        if (relatedQs.exists()) {\n          relatedQs.update(_defineProperty({}, field.relatedName, null));\n        }\n      } else if (field instanceof OneToOne) {\n        // Set null to any foreign keys or one to ones pointed to\n        // this instance.\n        if (this[key] !== null) {\n          this[key][field.relatedName] = null;\n        }\n      }\n    }\n  } // DEPRECATED AND REMOVED METHODS\n\n  /**\n   * Returns a boolean indicating if an entity\n   * with the id `id` exists in the state.\n   *\n   * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n   * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n   * @deprecated Please use {@link Model.idExists} instead.\n   */\n  ;\n\n  Model.hasId = function hasId(id) {\n    console.warn(\"`Model.hasId` has been deprecated. Please use `Model.idExists` instead.\");\n    return this.idExists(id);\n  }\n  /**\n   * @deprecated See the 0.9 migration guide on the GitHub repo.\n   * @throws {Error} Due to deprecation.\n   */\n  ;\n\n  _proto.getNextState = function getNextState() {\n    throw new Error(\"`Model.prototype.getNextState` has been removed. See the 0.9 \" + \"migration guide on the GitHub repo.\");\n  };\n\n  _createClass(Model, [{\n    key: \"ref\",\n    get: function get() {\n      var ThisModel = this.getClass(); // eslint-disable-next-line no-underscore-dangle\n\n      return ThisModel._findDatabaseRows(_defineProperty({}, ThisModel.idAttribute, this.getId()))[0];\n    }\n  }], [{\n    key: \"idAttribute\",\n    get: function get() {\n      if (typeof this._session === \"undefined\") {\n        throw new Error([\"Tried to get the \".concat(this.modelName, \" model's id attribute without a session. \"), \"Create a session using `session = orm.session()` and access \", \"`session[\\\"\".concat(this.modelName, \"\\\"].idAttribute` instead.\")].join(\"\"));\n      }\n\n      return this.session.db.describe(this.modelName).idAttribute;\n    }\n  }, {\n    key: \"session\",\n    get: function get() {\n      return this._session;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this.getQuerySet();\n    }\n  }]);\n\n  return Model;\n}();\n\nModel.fields = {\n  id: attr()\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\nexport default Model;","map":{"version":3,"names":["_toConsumableArray","_slicedToArray","_createClass","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Session","QuerySet","attr","ForeignKey","ManyToMany","OneToOne","CREATE","UPDATE","DELETE","FILTER","normalizeEntity","arrayDiffActions","objectShallowEquals","warnDeprecated","m2mName","getByIdQuery","modelInstance","modelClass","getClass","idAttribute","modelName","table","clauses","type","payload","getId","Model","props","_initFields","_proto","prototype","_this","propsObj","_fields","fieldName","get","set","value","configurable","toString","concat","options","markAccessed","ids","_session","Error","join","session","markFullTableScanned","markAccessedIndexes","indexes","_this2","map","_ref","_ref2","attribute","connect","getQuerySet","QuerySetClass","querySetClass","invalidateClassCache","isSetUp","undefined","virtualFields","tableOptions","backend","create","userProps","_this3","m2mRelations","declaredFieldNames","fields","declaredVirtualFieldNames","field","valuePassed","hasOwnProperty","getDefault","as","newEntry","applyUpdate","action","ThisModel","instance","_refreshMany2Many","upsert","id","idExists","model","withId","update","exists","lookupObj","Boolean","_findDatabaseRows","rows","constructor","querySpec","query","_this4","className","fieldNames","toModelArray","val","equals","otherModel","propertyName","userMergeObj","mergeObj","mergeKey","isRealField","_field","mergedFields","updatedModel","refreshFromState","ref","_delete","_onDelete","relations","_this5","name","reverse","values","Array","isArray","TypeError","normalizedNewIds","uniqueIds","Set","throughModelName","through","ThroughModel","fromField","toField","_field$throughFields","throughFields","from","to","_field$throughFields2","currentIds","toRefArray","diffActions","idsToDelete","idsToAdd","add","_this6","remove","_this7","_this$getClass","descriptorKey","clear","relatedQs","relatedName","hasId","console","warn","getNextState","db","describe"],"sources":["/Users/developer/task/task3/node_modules/redux-orm/es/Model.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Session from \"./Session\";\nimport QuerySet from \"./QuerySet\";\nimport { attr } from \"./fields\";\nimport ForeignKey from \"./fields/ForeignKey\";\nimport ManyToMany from \"./fields/ManyToMany\";\nimport OneToOne from \"./fields/OneToOne\";\nimport { CREATE, UPDATE, DELETE, FILTER } from \"./constants\";\nimport { normalizeEntity, arrayDiffActions, objectShallowEquals, warnDeprecated, m2mName } from \"./utils\";\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\n\nfunction getByIdQuery(modelInstance) {\n  var modelClass = modelInstance.getClass();\n  var idAttribute = modelClass.idAttribute,\n      modelName = modelClass.modelName;\n  return {\n    table: modelName,\n    clauses: [{\n      type: FILTER,\n      payload: _defineProperty({}, idAttribute, modelInstance.getId())\n    }]\n  };\n}\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\n\n\nvar Model = /*#__PURE__*/function () {\n  /**\n   * Creates a Model instance from it's properties.\n   * Don't use this to create a new record; Use the static method {@link Model#create}.\n   * @param  {Object} props - the properties to instantiate with\n   */\n  function Model(props) {\n    this._initFields(props);\n  }\n\n  var _proto = Model.prototype;\n\n  _proto._initFields = function _initFields(props) {\n    var _this = this;\n\n    var propsObj = Object(props);\n    this._fields = _objectSpread({}, propsObj);\n    Object.keys(propsObj).forEach(function (fieldName) {\n      // In this case, we got a prop that wasn't defined as a field.\n      // Assuming it's an arbitrary data field, making an instance-specific\n      // descriptor for it.\n      // Using the in operator as the property could be defined anywhere\n      // on the prototype chain.\n      if (!(fieldName in _this)) {\n        Object.defineProperty(_this, fieldName, {\n          get: function get() {\n            return _this._fields[fieldName];\n          },\n          set: function set(value) {\n            return _this.set(fieldName, value);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n  };\n\n  Model.toString = function toString() {\n    return \"ModelClass: \".concat(this.modelName);\n  }\n  /**\n   * Returns the options object passed to the database for the table that represents\n   * this Model class.\n   *\n   * Returns an empty object by default, which means the database\n   * will use default options. You can either override this function to return the options\n   * you want to use, or assign the options object as a static property of the same name to the\n   * Model class.\n   *\n   * @return {Object} the options object passed to the database for the table\n   *                  representing this Model class.\n   */\n  ;\n\n  Model.options = function options() {\n    return {};\n  }\n  /**\n   * Manually mark individual instances as accessed.\n   * This allows invalidating selector memoization within mutable sessions.\n   *\n   * @param {Array.<*>} ids - Array of primary key values\n   * @return {undefined}\n   */\n  ;\n\n  Model.markAccessed = function markAccessed(ids) {\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to mark rows of the \".concat(this.modelName, \" model as accessed without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].markAccessed` instead.\")].join(\"\"));\n    }\n\n    this.session.markAccessed(this.modelName, ids);\n  }\n  /**\n   * Manually mark this model's table as scanned.\n   * This allows invalidating selector memoization within mutable sessions.\n   *\n   * @return {undefined}\n   */\n  ;\n\n  Model.markFullTableScanned = function markFullTableScanned() {\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to mark the \".concat(this.modelName, \" model as full table scanned without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].markFullTableScanned` instead.\")].join(\"\"));\n    }\n\n    this.session.markFullTableScanned(this.modelName);\n  }\n  /**\n   * Manually mark indexes as accessed.\n   * This allows invalidating selector memoization within mutable sessions.\n   *\n   * @param {Array.<Array.<*,*>>} indexes - Array of column-value pairs\n   * @return {undefined}\n   */\n  ;\n\n  Model.markAccessedIndexes = function markAccessedIndexes(indexes) {\n    var _this2 = this;\n\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to mark indexes for the \".concat(this.modelName, \" model as accessed without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].markAccessedIndexes` instead.\")].join(\"\"));\n    }\n\n    this.session.markAccessedIndexes(indexes.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          attribute = _ref2[0],\n          value = _ref2[1];\n\n      return [_this2.modelName, attribute, value];\n    }));\n  }\n  /**\n   * Returns the id attribute of this {@link Model}.\n   *\n   * @return {string} The id attribute of this {@link Model}.\n   */\n  ;\n\n  /**\n   * Connect the model class to a {@link Session}.\n   *\n   * @private\n   * @param  {Session} session - The session to connect to.\n   */\n  Model.connect = function connect(session) {\n    if (!(session instanceof Session)) {\n      throw new Error(\"A model can only be connected to instances of Session.\");\n    }\n\n    this._session = session;\n  }\n  /**\n   * Get the current {@link Session} instance.\n   *\n   * @private\n   * @return {Session} The current {@link Session} instance.\n   */\n  ;\n\n  /**\n   * Returns an instance of the model's `querySetClass` field.\n   * By default, this will be an empty {@link QuerySet}.\n   *\n   * @return {Object} An instance of the model's `querySetClass`.\n   */\n  Model.getQuerySet = function getQuerySet() {\n    var QuerySetClass = this.querySetClass;\n    return new QuerySetClass(this);\n  }\n  /**\n   * @return {undefined}\n   */\n  ;\n\n  Model.invalidateClassCache = function invalidateClassCache() {\n    this.isSetUp = undefined;\n    this.virtualFields = {};\n  }\n  /**\n   * @see {@link Model.getQuerySet}\n   */\n  ;\n\n  /**\n   * Returns parameters to be passed to {@link Table} instance.\n   *\n   * @private\n   */\n  Model.tableOptions = function tableOptions() {\n    if (typeof this.backend === \"function\") {\n      warnDeprecated(\"`Model.backend` has been deprecated. Please rename to `.options`.\");\n      return this.backend();\n    }\n\n    if (this.backend) {\n      warnDeprecated(\"`Model.backend` has been deprecated. Please rename to `.options`.\");\n      return this.backend;\n    }\n\n    if (typeof this.options === \"function\") {\n      return this.options();\n    }\n\n    return this.options;\n  }\n  /**\n   * Creates a new record in the database, instantiates a {@link Model} and returns it.\n   *\n   * If you pass values for many-to-many fields, instances are created on the through\n   * model as well.\n   *\n   * @param  {Object} userProps - the new {@link Model}'s properties.\n   * @return {Model} a new {@link Model} instance.\n   */\n  ;\n\n  Model.create = function create(userProps) {\n    var _this3 = this;\n\n    if (typeof this._session === \"undefined\") {\n      throw new Error([\"Tried to create a \".concat(this.modelName, \" model instance without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].create` instead.\")].join(\"\"));\n    }\n\n    var props = _objectSpread({}, userProps);\n\n    var m2mRelations = {};\n    var declaredFieldNames = Object.keys(this.fields);\n    var declaredVirtualFieldNames = Object.keys(this.virtualFields);\n    declaredFieldNames.forEach(function (key) {\n      var field = _this3.fields[key];\n      var valuePassed = userProps.hasOwnProperty(key);\n\n      if (!(field instanceof ManyToMany)) {\n        if (valuePassed) {\n          var value = userProps[key];\n          props[key] = normalizeEntity(value);\n        } else if (field.getDefault) {\n          props[key] = field.getDefault();\n        }\n      } else if (valuePassed) {\n        // Save for later processing\n        m2mRelations[key] = userProps[key];\n\n        if (!field.as) {\n          /**\n           * The relationship does not have an accessor\n           * Discard the value from props as the field will be populated later with instances\n           * from the target models when refreshing the M2M relations.\n           * If the relationship does have an accessor (`as`) field then we do want to keep this\n           * original value in the props to expose the raw list of IDs from the instance.\n           */\n          delete props[key];\n        }\n      }\n    }); // add backward many-many if required\n\n    declaredVirtualFieldNames.forEach(function (key) {\n      if (!m2mRelations.hasOwnProperty(key)) {\n        var field = _this3.virtualFields[key];\n\n        if (userProps.hasOwnProperty(key) && field instanceof ManyToMany) {\n          // If a value is supplied for a ManyToMany field,\n          // discard them from props and save for later processing.\n          m2mRelations[key] = userProps[key];\n          delete props[key];\n        }\n      }\n    });\n    var newEntry = this.session.applyUpdate({\n      action: CREATE,\n      table: this.modelName,\n      payload: props\n    });\n    var ThisModel = this;\n    var instance = new ThisModel(newEntry);\n\n    instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n\n\n    return instance;\n  }\n  /**\n   * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n   *\n   * If you pass values for many-to-many fields, instances are created on the through\n   * model as well.\n   *\n   * @param  {Object} userProps - the required {@link Model}'s properties.\n   * @return {Model} a {@link Model} instance.\n   */\n  ;\n\n  Model.upsert = function upsert(userProps) {\n    if (typeof this.session === \"undefined\") {\n      throw new Error([\"Tried to upsert a \".concat(this.modelName, \" model instance without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].upsert` instead.\")].join(\"\"));\n    }\n\n    var idAttribute = this.idAttribute;\n\n    if (userProps.hasOwnProperty(idAttribute)) {\n      var id = userProps[idAttribute];\n\n      if (this.idExists(id)) {\n        var model = this.withId(id);\n        model.update(userProps);\n        return model;\n      }\n    }\n\n    return this.create(userProps);\n  }\n  /**\n   * Returns a {@link Model} instance for the object with id `id`.\n   * Returns `null` if the model has no instance with id `id`.\n   *\n   * You can use {@link Model#idExists} to check for existence instead.\n   *\n   * @param  {*} id - the `id` of the object to get\n   * @throws If object with id `id` doesn't exist\n   * @return {Model|null} {@link Model} instance with id `id`\n   */\n  ;\n\n  Model.withId = function withId(id) {\n    return this.get(_defineProperty({}, this.idAttribute, id));\n  }\n  /**\n   * Returns a boolean indicating if an entity\n   * with the id `id` exists in the state.\n   *\n   * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n   * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n   *\n   * @since 0.11.0\n   */\n  ;\n\n  Model.idExists = function idExists(id) {\n    return this.exists(_defineProperty({}, this.idAttribute, id));\n  }\n  /**\n   * Returns a boolean indicating if an entity\n   * with the given props exists in the state.\n   *\n   * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n   * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n   */\n  ;\n\n  Model.exists = function exists(lookupObj) {\n    if (typeof this.session === \"undefined\") {\n      throw new Error([\"Tried to check if a \".concat(this.modelName, \" model instance exists without a session. \"), \"Create a session using `session = orm.session()` and call \", \"`session[\\\"\".concat(this.modelName, \"\\\"].exists` instead.\")].join(\"\"));\n    }\n\n    return Boolean(this._findDatabaseRows(lookupObj).length);\n  }\n  /**\n   * Gets the {@link Model} instance that matches properties in `lookupObj`.\n   * Throws an error if {@link Model} if multiple records match\n   * the properties.\n   *\n   * @param  {Object} lookupObj - the properties used to match a single entity.\n   * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n   * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n   */\n  ;\n\n  Model.get = function get(lookupObj) {\n    var ThisModel = this;\n\n    var rows = this._findDatabaseRows(lookupObj);\n\n    if (rows.length === 0) {\n      return null;\n    }\n\n    if (rows.length > 1) {\n      throw new Error(\"Expected to find a single row in `\".concat(this.modelName, \".get`. Found \").concat(rows.length, \".\"));\n    }\n\n    return new ThisModel(rows[0]);\n  }\n  /**\n   * Gets the {@link Model} class or subclass constructor (the class that\n   * instantiated this instance).\n   *\n   * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n   *                 this instance.\n   */\n  ;\n\n  _proto.getClass = function getClass() {\n    return this.constructor;\n  }\n  /**\n   * Gets the id value of the current instance by looking up the id attribute.\n   * @return {*} The id value of the current instance.\n   */\n  ;\n\n  _proto.getId = function getId() {\n    return this._fields[this.getClass().idAttribute];\n  }\n  /**\n   * Returns a reference to the plain JS object in the store.\n   * It contains all the properties that you pass when creating the model,\n   * except for primary keys of many-to-many relationships with a custom accessor.\n   *\n   * Make sure never to mutate this.\n   *\n   * @return {Object} a reference to the plain JS object in the store\n   */\n  ;\n\n  /**\n   * Finds all rows in this model's table that match the given `lookupObj`.\n   * If no `lookupObj` is passed, all rows in the model's table will be returned.\n   *\n   * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n   * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n   * @private\n   */\n  Model._findDatabaseRows = function _findDatabaseRows(lookupObj) {\n    var querySpec = {\n      table: this.modelName\n    };\n\n    if (lookupObj) {\n      querySpec.clauses = [{\n        type: FILTER,\n        payload: lookupObj\n      }];\n    }\n\n    return this.session.query(querySpec).rows;\n  }\n  /**\n   * Returns a string representation of the {@link Model} instance.\n   *\n   * @return {string} A string representation of this {@link Model} instance.\n   */\n  ;\n\n  _proto.toString = function toString() {\n    var _this4 = this;\n\n    var ThisModel = this.getClass();\n    var className = ThisModel.modelName;\n    var fieldNames = Object.keys(ThisModel.fields);\n    var fields = fieldNames.map(function (fieldName) {\n      var field = ThisModel.fields[fieldName];\n\n      if (field instanceof ManyToMany) {\n        var ids = _this4[fieldName].toModelArray().map(function (model) {\n          return model.getId();\n        });\n\n        return \"\".concat(fieldName, \": [\").concat(ids.join(\", \"), \"]\");\n      }\n\n      var val = _this4._fields[fieldName];\n      return \"\".concat(fieldName, \": \").concat(val);\n    }).join(\", \");\n    return \"\".concat(className, \": {\").concat(fields, \"}\");\n  }\n  /**\n   * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n   * Equality is determined by shallow comparing their attributes.\n   *\n   * This equality is used when you call {@link Model#update}.\n   * You can prevent model updates by returning `true` here.\n   * However, a model will always be updated if its relationships are changed.\n   *\n   * @param  {Model} otherModel - a {@link Model} instance to compare\n   * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n   */\n  ;\n\n  _proto.equals = function equals(otherModel) {\n    // eslint-disable-next-line no-underscore-dangle\n    return objectShallowEquals(this._fields, otherModel._fields);\n  }\n  /**\n   * Updates a property name to given value for this {@link Model} instance.\n   * The values are immediately committed to the database.\n   *\n   * @param {string} propertyName - name of the property to set\n   * @param {*} value - value assigned to the property\n   * @return {undefined}\n   */\n  ;\n\n  _proto.set = function set(propertyName, value) {\n    this.update(_defineProperty({}, propertyName, value));\n  }\n  /**\n   * Assigns multiple fields and corresponding values to this {@link Model} instance.\n   * The updates are immediately committed to the database.\n   *\n   * @param  {Object} userMergeObj - an object that will be merged with this instance.\n   * @return {undefined}\n   */\n  ;\n\n  _proto.update = function update(userMergeObj) {\n    var ThisModel = this.getClass();\n\n    if (typeof ThisModel.session === \"undefined\") {\n      throw new Error([\"Tried to update a \".concat(ThisModel.modelName, \" model instance without a session. \"), \"You cannot call `.update` on an instance that you did not receive from the database.\"].join(\"\"));\n    }\n\n    var mergeObj = _objectSpread({}, userMergeObj);\n\n    var fields = ThisModel.fields,\n        virtualFields = ThisModel.virtualFields;\n    var m2mRelations = {}; // If an array of entities or id's is supplied for a\n    // many-to-many related field, clear the old relations\n    // and add the new ones.\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n    for (var mergeKey in mergeObj) {\n      var isRealField = fields.hasOwnProperty(mergeKey);\n\n      if (isRealField) {\n        var field = fields[mergeKey];\n\n        if (field instanceof ForeignKey || field instanceof OneToOne) {\n          // update one-one/fk relations\n          mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n        } else if (field instanceof ManyToMany) {\n          // field is forward relation\n          m2mRelations[mergeKey] = mergeObj[mergeKey];\n\n          if (!field.as) {\n            /**\n             * The relationship does not have an accessor\n             * Discard the value from props as the field will be populated later with instances\n             * from the target models when refreshing the M2M relations.\n             * If the relationship does have an accessor (`as`) field then we do want to keep this\n             * original value in the props to expose the raw list of IDs from the instance.\n             */\n            delete mergeObj[mergeKey];\n          }\n        }\n      } else if (virtualFields.hasOwnProperty(mergeKey)) {\n        var _field = virtualFields[mergeKey];\n\n        if (_field instanceof ManyToMany) {\n          // field is backward relation\n          m2mRelations[mergeKey] = mergeObj[mergeKey];\n          delete mergeObj[mergeKey];\n        }\n      }\n    }\n\n    var mergedFields = _objectSpread(_objectSpread({}, this._fields), mergeObj);\n\n    var updatedModel = new ThisModel(mergedFields); // only update fields if they have changed (referentially)\n\n    if (!this.equals(updatedModel)) {\n      this._initFields(mergedFields);\n\n      ThisModel.session.applyUpdate({\n        action: UPDATE,\n        query: getByIdQuery(this),\n        payload: mergeObj\n      });\n    } // update virtual fields\n\n\n    this._refreshMany2Many(m2mRelations);\n  }\n  /**\n   * Updates {@link Model} instance attributes to reflect the\n   * database state in the current session.\n   * @return {undefined}\n   */\n  ;\n\n  _proto.refreshFromState = function refreshFromState() {\n    this._initFields(this.ref);\n  }\n  /**\n   * Deletes the record for this {@link Model} instance.\n   * You'll still be able to access fields and values on the instance.\n   *\n   * @return {undefined}\n   */\n  ;\n\n  _proto[\"delete\"] = function _delete() {\n    var ThisModel = this.getClass();\n\n    if (typeof ThisModel.session === \"undefined\") {\n      throw new Error([\"Tried to delete a \".concat(ThisModel.modelName, \" model instance without a session. \"), \"You cannot call `.delete` on an instance that you did not receive from the database.\"].join(\"\"));\n    }\n\n    this._onDelete();\n\n    ThisModel.session.applyUpdate({\n      action: DELETE,\n      query: getByIdQuery(this)\n    });\n  }\n  /**\n   * Update many-many relations for model.\n   * @param relations\n   * @return undefined\n   * @private\n   */\n  ;\n\n  _proto._refreshMany2Many = function _refreshMany2Many(relations) {\n    var _this5 = this;\n\n    var ThisModel = this.getClass();\n    var fields = ThisModel.fields,\n        virtualFields = ThisModel.virtualFields,\n        modelName = ThisModel.modelName;\n    Object.keys(relations).forEach(function (name) {\n      var reverse = !fields.hasOwnProperty(name);\n      var field = virtualFields[name];\n      var values = relations[name];\n\n      if (!Array.isArray(values)) {\n        throw new TypeError(\"Failed to resolve many-to-many relationship: \".concat(modelName, \"[\").concat(name, \"] must be an array (passed: \").concat(values, \")\"));\n      }\n\n      var normalizedNewIds = values.map(normalizeEntity);\n\n      var uniqueIds = _toConsumableArray(new Set(normalizedNewIds));\n\n      if (normalizedNewIds.length !== uniqueIds.length) {\n        throw new Error(\"Found duplicate id(s) when passing \\\"\".concat(normalizedNewIds, \"\\\" to \").concat(ThisModel.modelName, \".\").concat(name, \" value\"));\n      }\n\n      var throughModelName = field.through || m2mName(ThisModel.modelName, name);\n      var ThroughModel = ThisModel.session[throughModelName];\n      var fromField;\n      var toField;\n\n      if (!reverse) {\n        var _field$throughFields = field.throughFields;\n        fromField = _field$throughFields.from;\n        toField = _field$throughFields.to;\n      } else {\n        var _field$throughFields2 = field.throughFields;\n        toField = _field$throughFields2.from;\n        fromField = _field$throughFields2.to;\n      }\n\n      var currentIds = ThroughModel.filter(function (through) {\n        return through[fromField] === _this5[ThisModel.idAttribute];\n      }).toRefArray().map(function (ref) {\n        return ref[toField];\n      });\n      var diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n      if (diffActions) {\n        var idsToDelete = diffActions[\"delete\"],\n            idsToAdd = diffActions.add;\n\n        if (idsToDelete.length > 0) {\n          var _this6;\n\n          (_this6 = _this5[field.as || name]).remove.apply(_this6, _toConsumableArray(idsToDelete));\n        }\n\n        if (idsToAdd.length > 0) {\n          var _this7;\n\n          (_this7 = _this5[field.as || name]).add.apply(_this7, _toConsumableArray(idsToAdd));\n        }\n      }\n    });\n  }\n  /**\n   * @return {undefined}\n   * @private\n   */\n  ;\n\n  _proto._onDelete = function _onDelete() {\n    var _this$getClass = this.getClass(),\n        virtualFields = _this$getClass.virtualFields; // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n\n    for (var key in virtualFields) {\n      var field = virtualFields[key];\n\n      if (field instanceof ManyToMany) {\n        // Delete any many-to-many rows the entity is included in.\n        var descriptorKey = field.as || key;\n        this[descriptorKey].clear();\n      } else if (field instanceof ForeignKey) {\n        var relatedQs = this[key];\n\n        if (relatedQs.exists()) {\n          relatedQs.update(_defineProperty({}, field.relatedName, null));\n        }\n      } else if (field instanceof OneToOne) {\n        // Set null to any foreign keys or one to ones pointed to\n        // this instance.\n        if (this[key] !== null) {\n          this[key][field.relatedName] = null;\n        }\n      }\n    }\n  } // DEPRECATED AND REMOVED METHODS\n\n  /**\n   * Returns a boolean indicating if an entity\n   * with the id `id` exists in the state.\n   *\n   * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n   * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n   * @deprecated Please use {@link Model.idExists} instead.\n   */\n  ;\n\n  Model.hasId = function hasId(id) {\n    console.warn(\"`Model.hasId` has been deprecated. Please use `Model.idExists` instead.\");\n    return this.idExists(id);\n  }\n  /**\n   * @deprecated See the 0.9 migration guide on the GitHub repo.\n   * @throws {Error} Due to deprecation.\n   */\n  ;\n\n  _proto.getNextState = function getNextState() {\n    throw new Error(\"`Model.prototype.getNextState` has been removed. See the 0.9 \" + \"migration guide on the GitHub repo.\");\n  };\n\n  _createClass(Model, [{\n    key: \"ref\",\n    get: function get() {\n      var ThisModel = this.getClass(); // eslint-disable-next-line no-underscore-dangle\n\n      return ThisModel._findDatabaseRows(_defineProperty({}, ThisModel.idAttribute, this.getId()))[0];\n    }\n  }], [{\n    key: \"idAttribute\",\n    get: function get() {\n      if (typeof this._session === \"undefined\") {\n        throw new Error([\"Tried to get the \".concat(this.modelName, \" model's id attribute without a session. \"), \"Create a session using `session = orm.session()` and access \", \"`session[\\\"\".concat(this.modelName, \"\\\"].idAttribute` instead.\")].join(\"\"));\n      }\n\n      return this.session.db.describe(this.modelName).idAttribute;\n    }\n  }, {\n    key: \"session\",\n    get: function get() {\n      return this._session;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this.getQuerySet();\n    }\n  }]);\n\n  return Model;\n}();\n\nModel.fields = {\n  id: attr()\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\nexport default Model;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer\n  }\n}); // add some initial fake data\n\nlet userList = [];\nlet postList = [];\n\nconst fetchUser = async () => {\n  try {\n    const userRes = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n    userList = userRes.data;\n    userList.forEach((user, idx) => {\n      store.dispatch(createUser({\n        id: idx + 1,\n        name: user.name,\n        username: user.username,\n        email: user.email,\n        address: user.address,\n        company: user.company,\n        phone: user.phone,\n        website: user.website\n      }));\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchPost = async () => {\n  try {\n    const postRes = await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\n    userList.forEach(user => {\n      let i = 0;\n      postRes.data.forEach((post, idx) => {\n        if (post.userId === user.id) {\n          store.dispatch(createPost({\n            id: idx + 1,\n            userId: post.userId,\n            title: post.title,\n            completed: post.completed,\n            postId: i\n          }));\n          i++;\n        }\n      });\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchComment = async itemId => {\n  try {\n    for (let idx = 0; idx < postList.length; idx++) {\n      const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`);\n      const commentList = commentRes.data;\n      commentList.forEach(comment => {\n        store.dispatch(createComment({\n          id: comment.id,\n          postId: comment.postId,\n          body: comment.body,\n          email: comment.email,\n          name: comment.name\n        }));\n      });\n    }\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  fetchUser();\n  fetchPost();\n  fetchComment();\n};\n\ninit();\nexport default store;","map":{"version":3,"names":["configureStore","axios","reducer","currentPostReducer","createComment","createPost","createUser","ormReducer","store","orm","currentPost","userList","postList","fetchUser","userRes","get","data","forEach","user","idx","dispatch","id","name","username","email","address","company","phone","website","e","console","log","fetchPost","postRes","i","post","userId","title","completed","postId","fetchComment","itemId","length","commentRes","commentList","comment","body","init"],"sources":["/Users/developer/task/task3/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\n\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n  },\n});\n\n// add some initial fake data\nlet userList = [];\nlet postList = [];\nconst fetchUser = async () => {\n  try {\n    const userRes = await axios.get(\n      \"https://jsonplaceholder.typicode.com/users\"\n    );\n    userList = userRes.data;\n\n    userList.forEach((user, idx) => {\n      store.dispatch(\n        createUser({\n          id: idx + 1,\n          name: user.name,\n          username: user.username,\n          email: user.email,\n          address: user.address,\n          company: user.company,\n          phone: user.phone,\n          website: user.website,\n        })\n      );\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchPost = async () => {\n  try {\n    const postRes = await axios.get(\n      \"https://jsonplaceholder.typicode.com/todos\"\n    );\n\n    userList.forEach((user) => {\n      let i = 0;\n      postRes.data.forEach((post, idx) => {\n        if (post.userId === user.id) {\n          store.dispatch(\n            createPost({\n              id: idx + 1,\n              userId: post.userId,\n              title: post.title,\n              completed: post.completed,\n              postId: i,\n            })\n          );\n          i++;\n        }\n      });\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchComment = async (itemId) => {\n  try {\n    for (let idx = 0; idx < postList.length; idx++) {\n      const commentRes = await axios.get(\n        `https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`\n      );\n      const commentList = commentRes.data;\n\n      commentList.forEach((comment) => {\n        store.dispatch(\n          createComment({\n            id: comment.id,\n            postId: comment.postId,\n            body: comment.body,\n            email: comment.email,\n            name: comment.name,\n          })\n        );\n      });\n    }\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  fetchUser();\n  fetchPost();\n  fetchComment();\n};\n\ninit();\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,qBAA9C;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASJ,OAAO,IAAIK,UAApB,QAAsC,OAAtC;AAEA,MAAMC,KAAK,GAAGR,cAAc,CAAC;EAC3BE,OAAO,EAAE;IACPO,GAAG,EAAEF,UADE;IAEPG,WAAW,EAAEP;EAFN;AADkB,CAAD,CAA5B,C,CAOA;;AACA,IAAIQ,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,EAAf;;AACA,MAAMC,SAAS,GAAG,YAAY;EAC5B,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CACpB,4CADoB,CAAtB;IAGAJ,QAAQ,GAAGG,OAAO,CAACE,IAAnB;IAEAL,QAAQ,CAACM,OAAT,CAAiB,CAACC,IAAD,EAAOC,GAAP,KAAe;MAC9BX,KAAK,CAACY,QAAN,CACEd,UAAU,CAAC;QACTe,EAAE,EAAEF,GAAG,GAAG,CADD;QAETG,IAAI,EAAEJ,IAAI,CAACI,IAFF;QAGTC,QAAQ,EAAEL,IAAI,CAACK,QAHN;QAITC,KAAK,EAAEN,IAAI,CAACM,KAJH;QAKTC,OAAO,EAAEP,IAAI,CAACO,OALL;QAMTC,OAAO,EAAER,IAAI,CAACQ,OANL;QAOTC,KAAK,EAAET,IAAI,CAACS,KAPH;QAQTC,OAAO,EAAEV,IAAI,CAACU;MARL,CAAD,CADZ;IAYD,CAbD;EAcD,CApBD,CAoBE,OAAOC,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;EACD;AACF,CAxBD;;AA0BA,MAAMG,SAAS,GAAG,YAAY;EAC5B,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMhC,KAAK,CAACc,GAAN,CACpB,4CADoB,CAAtB;IAIAJ,QAAQ,CAACM,OAAT,CAAkBC,IAAD,IAAU;MACzB,IAAIgB,CAAC,GAAG,CAAR;MACAD,OAAO,CAACjB,IAAR,CAAaC,OAAb,CAAqB,CAACkB,IAAD,EAAOhB,GAAP,KAAe;QAClC,IAAIgB,IAAI,CAACC,MAAL,KAAgBlB,IAAI,CAACG,EAAzB,EAA6B;UAC3Bb,KAAK,CAACY,QAAN,CACEf,UAAU,CAAC;YACTgB,EAAE,EAAEF,GAAG,GAAG,CADD;YAETiB,MAAM,EAAED,IAAI,CAACC,MAFJ;YAGTC,KAAK,EAAEF,IAAI,CAACE,KAHH;YAITC,SAAS,EAAEH,IAAI,CAACG,SAJP;YAKTC,MAAM,EAAEL;UALC,CAAD,CADZ;UASAA,CAAC;QACF;MACF,CAbD;IAcD,CAhBD;EAiBD,CAtBD,CAsBE,OAAOL,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;EACD;AACF,CA1BD;;AA4BA,MAAMW,YAAY,GAAG,MAAOC,MAAP,IAAkB;EACrC,IAAI;IACF,KAAK,IAAItB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGP,QAAQ,CAAC8B,MAAjC,EAAyCvB,GAAG,EAA5C,EAAgD;MAC9C,MAAMwB,UAAU,GAAG,MAAM1C,KAAK,CAACc,GAAN,CACtB,wDAAuDI,GAAG,GAAG,CAAE,EADzC,CAAzB;MAGA,MAAMyB,WAAW,GAAGD,UAAU,CAAC3B,IAA/B;MAEA4B,WAAW,CAAC3B,OAAZ,CAAqB4B,OAAD,IAAa;QAC/BrC,KAAK,CAACY,QAAN,CACEhB,aAAa,CAAC;UACZiB,EAAE,EAAEwB,OAAO,CAACxB,EADA;UAEZkB,MAAM,EAAEM,OAAO,CAACN,MAFJ;UAGZO,IAAI,EAAED,OAAO,CAACC,IAHF;UAIZtB,KAAK,EAAEqB,OAAO,CAACrB,KAJH;UAKZF,IAAI,EAAEuB,OAAO,CAACvB;QALF,CAAD,CADf;MASD,CAVD;IAWD;EACF,CAnBD,CAmBE,OAAOO,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;EACD;AACF,CAvBD;;AAyBA,MAAMkB,IAAI,GAAG,MAAM;EACjBlC,SAAS;EACTmB,SAAS;EACTQ,YAAY;AACb,CAJD;;AAMAO,IAAI;AACJ,eAAevC,KAAf"},"metadata":{},"sourceType":"module"}
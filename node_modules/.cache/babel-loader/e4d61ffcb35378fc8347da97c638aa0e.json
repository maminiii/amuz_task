{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"redux-orm\";\nimport orm from \"../orm\"; // =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\n\nexport const commentsSelector = _s(createSelector(orm, _s(session => {\n  _s();\n\n  const currentPostId = useSelector(currentPostCommentsSelector);\n  console.log(\"##currentPostId\", currentPostId);\n  const commentModels = session.Comment.all().toModelArray();\n  const formattedComments = commentModels.map(comment => {\n    let postId = \"\";\n\n    if (!comment.postId) {\n      console.warn(\"No post model found for comment: \", comment);\n    } else {\n      postId = comment.postId;\n    }\n\n    return {\n      id: comment.id,\n      postId,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name\n    };\n  });\n  return formattedComments;\n}, \"hVIod/+LlJL5nrJBpbzb1fBckgg=\", false, function () {\n  return [useSelector];\n})), \"hVIod/+LlJL5nrJBpbzb1fBckgg=\", false, function () {\n  return [useSelector];\n}); // CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\n\nexport const currentPostCommentsSelector = createSelector([orm, state => state.currentPost], (session, currentPost) => {\n  if (currentPost === undefined || currentPost === null) return 1; // const commentModels = session.Post.all().toModelArray();\n  // return commentModels.flatMap((post) => {\n  //   if (post.user.id === currentPost) {\n  //     return [\n  //       {\n  //         id: post.id,\n  //         content: post.content,\n  //         name: post.user.name,\n  //       },\n  //     ];\n  //   } else {\n  //     return [];\n  //   }\n  // });\n\n  console.log(\"##currentPost\", currentPost);\n  return currentPost;\n}); // POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\n\nexport const postCommentsSelector = createSelector([orm.Post, orm.Post.comments], (post, comments) => {\n  if (!comments) return [];\n  return comments.map(comment => ({\n    id: comment.id,\n    postId: post.id,\n    email: comment.email,\n    body: comment.body,\n    name: comment.name\n  }));\n});","map":{"version":3,"names":["useSelector","createSelector","orm","commentsSelector","session","currentPostId","currentPostCommentsSelector","console","log","commentModels","Comment","all","toModelArray","formattedComments","map","comment","postId","warn","id","email","body","name","state","currentPost","undefined","postCommentsSelector","Post","comments","post"],"sources":["/Users/developer/task/task3/src/store/modelDucks/CommentSelectors.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { createSelector } from \"redux-orm\";\nimport orm from \"../orm\";\n\n// =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\nexport const commentsSelector = createSelector(orm, (session) => {\n  const currentPostId = useSelector(currentPostCommentsSelector);\n  console.log(\"##currentPostId\", currentPostId);\n  const commentModels = session.Comment.all().toModelArray();\n  const formattedComments = commentModels.map((comment) => {\n    let postId = \"\";\n    if (!comment.postId) {\n      console.warn(\"No post model found for comment: \", comment);\n    } else {\n      postId = comment.postId;\n    }\n    return {\n      id: comment.id,\n      postId,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    };\n  });\n  return formattedComments;\n});\n\n// CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\nexport const currentPostCommentsSelector = createSelector(\n  [orm, (state) => state.currentPost],\n  (session, currentPost) => {\n    if (currentPost === undefined || currentPost === null) return 1;\n    // const commentModels = session.Post.all().toModelArray();\n    // return commentModels.flatMap((post) => {\n    //   if (post.user.id === currentPost) {\n    //     return [\n    //       {\n    //         id: post.id,\n    //         content: post.content,\n    //         name: post.user.name,\n    //       },\n    //     ];\n    //   } else {\n    //     return [];\n    //   }\n    // });\n    console.log(\"##currentPost\", currentPost);\n    return currentPost;\n  }\n);\n\n// POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\nexport const postCommentsSelector = createSelector(\n  [orm.Post, orm.Post.comments],\n  (post, comments) => {\n    if (!comments) return [];\n    return comments.map((comment) => ({\n      id: comment.id,\n      postId: post.id,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    }));\n  }\n);\n"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,MAAGF,cAAc,CAACC,GAAD,KAAOE,OAAD,IAAa;EAAA;;EAC/D,MAAMC,aAAa,GAAGL,WAAW,CAACM,2BAAD,CAAjC;EACAC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,aAA/B;EACA,MAAMI,aAAa,GAAGL,OAAO,CAACM,OAAR,CAAgBC,GAAhB,GAAsBC,YAAtB,EAAtB;EACA,MAAMC,iBAAiB,GAAGJ,aAAa,CAACK,GAAd,CAAmBC,OAAD,IAAa;IACvD,IAAIC,MAAM,GAAG,EAAb;;IACA,IAAI,CAACD,OAAO,CAACC,MAAb,EAAqB;MACnBT,OAAO,CAACU,IAAR,CAAa,mCAAb,EAAkDF,OAAlD;IACD,CAFD,MAEO;MACLC,MAAM,GAAGD,OAAO,CAACC,MAAjB;IACD;;IACD,OAAO;MACLE,EAAE,EAAEH,OAAO,CAACG,EADP;MAELF,MAFK;MAGLG,KAAK,EAAEJ,OAAO,CAACI,KAHV;MAILC,IAAI,EAAEL,OAAO,CAACK,IAJT;MAKLC,IAAI,EAAEN,OAAO,CAACM;IALT,CAAP;EAOD,CAdyB,CAA1B;EAeA,OAAOR,iBAAP;AACD,CApB6C;EAAA,QACtBb,WADsB;AAAA,GAAjB;EAAA,QACLA,WADK;AAAA,EAAtB,C,CAsBP;AACA;;AACA,OAAO,MAAMM,2BAA2B,GAAGL,cAAc,CACvD,CAACC,GAAD,EAAOoB,KAAD,IAAWA,KAAK,CAACC,WAAvB,CADuD,EAEvD,CAACnB,OAAD,EAAUmB,WAAV,KAA0B;EACxB,IAAIA,WAAW,KAAKC,SAAhB,IAA6BD,WAAW,KAAK,IAAjD,EAAuD,OAAO,CAAP,CAD/B,CAExB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAhB,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Be,WAA7B;EACA,OAAOA,WAAP;AACD,CApBsD,CAAlD,C,CAuBP;AACA;AACA;AACA;;AACA,OAAO,MAAME,oBAAoB,GAAGxB,cAAc,CAChD,CAACC,GAAG,CAACwB,IAAL,EAAWxB,GAAG,CAACwB,IAAJ,CAASC,QAApB,CADgD,EAEhD,CAACC,IAAD,EAAOD,QAAP,KAAoB;EAClB,IAAI,CAACA,QAAL,EAAe,OAAO,EAAP;EACf,OAAOA,QAAQ,CAACb,GAAT,CAAcC,OAAD,KAAc;IAChCG,EAAE,EAAEH,OAAO,CAACG,EADoB;IAEhCF,MAAM,EAAEY,IAAI,CAACV,EAFmB;IAGhCC,KAAK,EAAEJ,OAAO,CAACI,KAHiB;IAIhCC,IAAI,EAAEL,OAAO,CAACK,IAJkB;IAKhCC,IAAI,EAAEN,OAAO,CAACM;EALkB,CAAd,CAAb,CAAP;AAOD,CAX+C,CAA3C"},"metadata":{},"sourceType":"module"}
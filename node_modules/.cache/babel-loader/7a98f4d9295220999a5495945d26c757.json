{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRecoilValue } from \"recoil\";\nimport { createSelector } from \"redux-orm\";\nimport { atomSelectedPostId } from \"../../data/atoms\";\nimport orm from \"../orm\"; // =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\n\nlet commentList = [];\n\nconst fetchComment = async itemId => {\n  try {\n    const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${itemId + 1}`);\n    commentList = commentRes.data;\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nexport const commentsSelector = _s(createSelector(orm, _s(session => {\n  _s();\n\n  const postId = useRecoilValue(atomSelectedPostId);\n  fetchComment(postId);\n  const commentModels = commentList;\n  const formattedComments = commentModels.map(comment => {\n    let postId = \"\";\n\n    if (!comment.postId) {\n      console.warn(\"No post model found for comment: \", comment);\n    } else {\n      postId = comment.postId;\n    }\n\n    return {\n      id: comment.id,\n      postId,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name\n    };\n  });\n  return formattedComments;\n}, \"wEBiUnNv84f8sp6dnXqncfIArEE=\", false, function () {\n  return [useRecoilValue];\n})), \"wEBiUnNv84f8sp6dnXqncfIArEE=\", false, function () {\n  return [useRecoilValue];\n}); // CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\n\nexport const currentPostCommentsSelector = createSelector([orm, state => state.currentPost], (session, currentPost) => {\n  if (currentPost === undefined || currentPost === null) return 1; // const commentModels = session.Post.all().toModelArray();\n  // return commentModels.flatMap((post) => {\n  //   if (post.user.id === currentPost) {\n  //     return [\n  //       {\n  //         id: post.id,\n  //         content: post.content,\n  //         name: post.user.name,\n  //       },\n  //     ];\n  //   } else {\n  //     return [];\n  //   }\n  // });\n\n  console.log(\"##currentPost\", currentPost);\n  return currentPost;\n}); // POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\n\nexport const postCommentsSelector = createSelector([orm.Post, orm.Post.comments], (post, comments) => {\n  if (!comments) return [];\n  return comments.map(comment => ({\n    id: comment.id,\n    postId: post.id,\n    email: comment.email,\n    body: comment.body,\n    name: comment.name\n  }));\n});","map":{"version":3,"names":["useRecoilValue","createSelector","atomSelectedPostId","orm","commentList","fetchComment","itemId","commentRes","axios","get","data","e","console","log","commentsSelector","session","postId","commentModels","formattedComments","map","comment","warn","id","email","body","name","currentPostCommentsSelector","state","currentPost","undefined","postCommentsSelector","Post","comments","post"],"sources":["/Users/developer/task/task3/src/store/modelDucks/CommentSelectors.js"],"sourcesContent":["import { useRecoilValue } from \"recoil\";\nimport { createSelector } from \"redux-orm\";\nimport { atomSelectedPostId } from \"../../data/atoms\";\nimport orm from \"../orm\";\n// =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\nlet commentList = [];\nconst fetchComment = async (itemId) => {\n  try {\n    const commentRes = await axios.get(\n      `https://jsonplaceholder.typicode.com/comments?postId=${itemId + 1}`\n    );\n    commentList = commentRes.data;\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\nexport const commentsSelector = createSelector(orm, (session) => {\n  const postId = useRecoilValue(atomSelectedPostId);\n  fetchComment(postId);\n  const commentModels = commentList;\n  const formattedComments = commentModels.map((comment) => {\n    let postId = \"\";\n    if (!comment.postId) {\n      console.warn(\"No post model found for comment: \", comment);\n    } else {\n      postId = comment.postId;\n    }\n    return {\n      id: comment.id,\n      postId,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    };\n  });\n  return formattedComments;\n});\n\n// CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\nexport const currentPostCommentsSelector = createSelector(\n  [orm, (state) => state.currentPost],\n  (session, currentPost) => {\n    if (currentPost === undefined || currentPost === null) return 1;\n    // const commentModels = session.Post.all().toModelArray();\n    // return commentModels.flatMap((post) => {\n    //   if (post.user.id === currentPost) {\n    //     return [\n    //       {\n    //         id: post.id,\n    //         content: post.content,\n    //         name: post.user.name,\n    //       },\n    //     ];\n    //   } else {\n    //     return [];\n    //   }\n    // });\n    console.log(\"##currentPost\", currentPost);\n    return currentPost;\n  }\n);\n\n// POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\nexport const postCommentsSelector = createSelector(\n  [orm.Post, orm.Post.comments],\n  (post, comments) => {\n    if (!comments) return [];\n    return comments.map((comment) => ({\n      id: comment.id,\n      postId: post.id,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    }));\n  }\n);\n"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,EAAlB;;AACA,MAAMC,YAAY,GAAG,MAAOC,MAAP,IAAkB;EACrC,IAAI;IACF,MAAMC,UAAU,GAAG,MAAMC,KAAK,CAACC,GAAN,CACtB,wDAAuDH,MAAM,GAAG,CAAE,EAD5C,CAAzB;IAGAF,WAAW,GAAGG,UAAU,CAACG,IAAzB;EACD,CALD,CAKE,OAAOC,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;EACD;AACF,CATD;;AAUA,OAAO,MAAMG,gBAAgB,MAAGb,cAAc,CAACE,GAAD,KAAOY,OAAD,IAAa;EAAA;;EAC/D,MAAMC,MAAM,GAAGhB,cAAc,CAACE,kBAAD,CAA7B;EACAG,YAAY,CAACW,MAAD,CAAZ;EACA,MAAMC,aAAa,GAAGb,WAAtB;EACA,MAAMc,iBAAiB,GAAGD,aAAa,CAACE,GAAd,CAAmBC,OAAD,IAAa;IACvD,IAAIJ,MAAM,GAAG,EAAb;;IACA,IAAI,CAACI,OAAO,CAACJ,MAAb,EAAqB;MACnBJ,OAAO,CAACS,IAAR,CAAa,mCAAb,EAAkDD,OAAlD;IACD,CAFD,MAEO;MACLJ,MAAM,GAAGI,OAAO,CAACJ,MAAjB;IACD;;IACD,OAAO;MACLM,EAAE,EAAEF,OAAO,CAACE,EADP;MAELN,MAFK;MAGLO,KAAK,EAAEH,OAAO,CAACG,KAHV;MAILC,IAAI,EAAEJ,OAAO,CAACI,IAJT;MAKLC,IAAI,EAAEL,OAAO,CAACK;IALT,CAAP;EAOD,CAdyB,CAA1B;EAeA,OAAOP,iBAAP;AACD,CApB6C;EAAA,QAC7BlB,cAD6B;AAAA,GAAjB;EAAA,QACZA,cADY;AAAA,EAAtB,C,CAsBP;AACA;;AACA,OAAO,MAAM0B,2BAA2B,GAAGzB,cAAc,CACvD,CAACE,GAAD,EAAOwB,KAAD,IAAWA,KAAK,CAACC,WAAvB,CADuD,EAEvD,CAACb,OAAD,EAAUa,WAAV,KAA0B;EACxB,IAAIA,WAAW,KAAKC,SAAhB,IAA6BD,WAAW,KAAK,IAAjD,EAAuD,OAAO,CAAP,CAD/B,CAExB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAhB,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Be,WAA7B;EACA,OAAOA,WAAP;AACD,CApBsD,CAAlD,C,CAuBP;AACA;AACA;AACA;;AACA,OAAO,MAAME,oBAAoB,GAAG7B,cAAc,CAChD,CAACE,GAAG,CAAC4B,IAAL,EAAW5B,GAAG,CAAC4B,IAAJ,CAASC,QAApB,CADgD,EAEhD,CAACC,IAAD,EAAOD,QAAP,KAAoB;EAClB,IAAI,CAACA,QAAL,EAAe,OAAO,EAAP;EACf,OAAOA,QAAQ,CAACb,GAAT,CAAcC,OAAD,KAAc;IAChCE,EAAE,EAAEF,OAAO,CAACE,EADoB;IAEhCN,MAAM,EAAEiB,IAAI,CAACX,EAFmB;IAGhCC,KAAK,EAAEH,OAAO,CAACG,KAHiB;IAIhCC,IAAI,EAAEJ,OAAO,CAACI,IAJkB;IAKhCC,IAAI,EAAEL,OAAO,CAACK;EALkB,CAAd,CAAb,CAAP;AAOD,CAX+C,CAA3C"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { normalizeEntity } from \"./utils\";\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n * @private\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\n\nfunction attrDescriptor(fieldName) {\n  return {\n    get: function get() {\n      return this._fields[fieldName];\n    },\n    set: function set(value) {\n      return this.set(fieldName, value);\n    },\n    enumerable: true,\n    configurable: true\n  };\n}\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\n\n\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n  return {\n    get: function get() {\n      var _this$getClass = this.getClass(),\n          DeclaredToModel = _this$getClass.session[declaredToModelName];\n\n      var toId = this._fields[fieldName];\n      return DeclaredToModel.withId(toId);\n    },\n    set: function set(value) {\n      this.update(_defineProperty({}, fieldName, normalizeEntity(value)));\n    }\n  };\n}\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\n\n\nfunction forwardsOneToOneDescriptor() {\n  return forwardsManyToOneDescriptor.apply(void 0, arguments);\n}\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\n\n\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n  return {\n    get: function get() {\n      var _this$getClass2 = this.getClass(),\n          DeclaredFromModel = _this$getClass2.session[declaredFromModelName];\n\n      return DeclaredFromModel.get(_defineProperty({}, declaredFieldName, this.getId()));\n    },\n    set: function set() {\n      throw new Error(\"Can't mutate a reverse one-to-one relation.\");\n    }\n  };\n}\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\n\n\nfunction backwardsManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n  return {\n    get: function get() {\n      var _this$getClass3 = this.getClass(),\n          DeclaredFromModel = _this$getClass3.session[declaredFromModelName];\n\n      return DeclaredFromModel.filter(_defineProperty({}, declaredFieldName, this.getId()));\n    },\n    set: function set() {\n      throw new Error(\"Can't mutate a reverse many-to-one relation.\");\n    }\n  };\n}\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\n\n\nfunction manyToManyDescriptor(declaredFromModelName, declaredToModelName, throughModelName, throughFields, reverse) {\n  return {\n    get: function get() {\n      var _this$getClass4 = this.getClass(),\n          _this$getClass4$sessi = _this$getClass4.session,\n          DeclaredFromModel = _this$getClass4$sessi[declaredFromModelName],\n          DeclaredToModel = _this$getClass4$sessi[declaredToModelName],\n          ThroughModel = _this$getClass4$sessi[throughModelName];\n\n      var ThisModel = reverse ? DeclaredToModel : DeclaredFromModel;\n      var OtherModel = reverse ? DeclaredFromModel : DeclaredToModel;\n      var thisReferencingField = reverse ? throughFields.to : throughFields.from;\n      var otherReferencingField = reverse ? throughFields.from : throughFields.to;\n      var thisId = this.getId();\n      var throughQs = ThroughModel.filter(_defineProperty({}, thisReferencingField, thisId));\n      /**\n       * all IDs of instances of the other model that are\n       * referenced by any instance of the current model\n       */\n\n      var referencedOtherIds = new Set(throughQs.toRefArray().map(function (obj) {\n        return obj[otherReferencingField];\n      }));\n      /**\n       * selects all instances of other model that are referenced\n       * by any instance of the current model\n       */\n\n      var qs = OtherModel.filter(function (otherModelInstance) {\n        return referencedOtherIds.has(otherModelInstance[OtherModel.idAttribute]);\n      });\n      /**\n       * Allows adding OtherModel instances to be referenced by the current instance.\n       *\n       * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n       * to the first book's list of referenced authors.\n       *\n       * @return undefined\n       */\n\n      qs.add = function add() {\n        for (var _len = arguments.length, entities = new Array(_len), _key = 0; _key < _len; _key++) {\n          entities[_key] = arguments[_key];\n        }\n\n        var idsToAdd = new Set(entities.map(normalizeEntity));\n        var existingQs = throughQs.filter(function (through) {\n          return idsToAdd.has(through[otherReferencingField]);\n        });\n\n        if (existingQs.exists()) {\n          var existingIds = existingQs.toRefArray().map(function (through) {\n            return through[otherReferencingField];\n          });\n          throw new Error(\"Tried to add already existing \".concat(OtherModel.modelName, \" id(s) \").concat(existingIds, \" to the \").concat(ThisModel.modelName, \" instance with id \").concat(thisId));\n        }\n\n        idsToAdd.forEach(function (id) {\n          var _ThroughModel$create;\n\n          ThroughModel.create((_ThroughModel$create = {}, _defineProperty(_ThroughModel$create, otherReferencingField, id), _defineProperty(_ThroughModel$create, thisReferencingField, thisId), _ThroughModel$create));\n        });\n      };\n      /**\n       * Removes references to all OtherModel instances from the current model.\n       *\n       * E.g. Book.first().authors.clear() would cause the first book's list\n       * of referenced authors to become empty.\n       *\n       * @return undefined\n       */\n\n\n      qs.clear = function clear() {\n        throughQs[\"delete\"]();\n      };\n      /**\n       * Removes references to all passed OtherModel instances from the current model.\n       *\n       * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n       * IDs 1 and 2 to no longer be referenced by the first book.\n       *\n       * @return undefined\n       */\n\n\n      qs.remove = function remove() {\n        for (var _len2 = arguments.length, entities = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          entities[_key2] = arguments[_key2];\n        }\n\n        var idsToRemove = new Set(entities.map(normalizeEntity));\n        var entitiesToDelete = throughQs.filter(function (through) {\n          return idsToRemove.has(through[otherReferencingField]);\n        });\n\n        if (entitiesToDelete.count() !== idsToRemove.size) {\n          // Tried deleting non-existing entities.\n          var entitiesToDeleteIds = entitiesToDelete.toRefArray().map(function (through) {\n            return through[otherReferencingField];\n          });\n\n          var unexistingIds = _toConsumableArray(idsToRemove).filter(function (id) {\n            return !entitiesToDeleteIds.includes(id);\n          });\n\n          throw new Error(\"Tried to delete non-existing \".concat(OtherModel.modelName, \" id(s) \").concat(unexistingIds, \" from the \").concat(ThisModel.modelName, \" instance with id \").concat(thisId));\n        }\n\n        entitiesToDelete[\"delete\"]();\n      };\n\n      return qs;\n    },\n    set: function set() {\n      throw new Error(\"Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.\");\n    }\n  };\n}\n\nexport { attrDescriptor, forwardsManyToOneDescriptor, forwardsOneToOneDescriptor, backwardsOneToOneDescriptor, backwardsManyToOneDescriptor, manyToManyDescriptor };","map":{"version":3,"names":["_toConsumableArray","_defineProperty","normalizeEntity","attrDescriptor","fieldName","get","_fields","set","value","enumerable","configurable","forwardsManyToOneDescriptor","declaredToModelName","_this$getClass","getClass","DeclaredToModel","session","toId","withId","update","forwardsOneToOneDescriptor","apply","arguments","backwardsOneToOneDescriptor","declaredFieldName","declaredFromModelName","_this$getClass2","DeclaredFromModel","getId","Error","backwardsManyToOneDescriptor","_this$getClass3","filter","manyToManyDescriptor","throughModelName","throughFields","reverse","_this$getClass4","_this$getClass4$sessi","ThroughModel","ThisModel","OtherModel","thisReferencingField","to","from","otherReferencingField","thisId","throughQs","referencedOtherIds","Set","toRefArray","map","obj","qs","otherModelInstance","has","idAttribute","add","_len","length","entities","Array","_key","idsToAdd","existingQs","through","exists","existingIds","concat","modelName","forEach","id","_ThroughModel$create","create","clear","remove","_len2","_key2","idsToRemove","entitiesToDelete","count","size","entitiesToDeleteIds","unexistingIds","includes"],"sources":["/Users/developer/task/task3/node_modules/redux-orm/es/descriptors.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { normalizeEntity } from \"./utils\";\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n * @private\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\n\nfunction attrDescriptor(fieldName) {\n  return {\n    get: function get() {\n      return this._fields[fieldName];\n    },\n    set: function set(value) {\n      return this.set(fieldName, value);\n    },\n    enumerable: true,\n    configurable: true\n  };\n}\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\n\n\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n  return {\n    get: function get() {\n      var _this$getClass = this.getClass(),\n          DeclaredToModel = _this$getClass.session[declaredToModelName];\n\n      var toId = this._fields[fieldName];\n      return DeclaredToModel.withId(toId);\n    },\n    set: function set(value) {\n      this.update(_defineProperty({}, fieldName, normalizeEntity(value)));\n    }\n  };\n}\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\n\n\nfunction forwardsOneToOneDescriptor() {\n  return forwardsManyToOneDescriptor.apply(void 0, arguments);\n}\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\n\n\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n  return {\n    get: function get() {\n      var _this$getClass2 = this.getClass(),\n          DeclaredFromModel = _this$getClass2.session[declaredFromModelName];\n\n      return DeclaredFromModel.get(_defineProperty({}, declaredFieldName, this.getId()));\n    },\n    set: function set() {\n      throw new Error(\"Can't mutate a reverse one-to-one relation.\");\n    }\n  };\n}\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\n\n\nfunction backwardsManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n  return {\n    get: function get() {\n      var _this$getClass3 = this.getClass(),\n          DeclaredFromModel = _this$getClass3.session[declaredFromModelName];\n\n      return DeclaredFromModel.filter(_defineProperty({}, declaredFieldName, this.getId()));\n    },\n    set: function set() {\n      throw new Error(\"Can't mutate a reverse many-to-one relation.\");\n    }\n  };\n}\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\n\n\nfunction manyToManyDescriptor(declaredFromModelName, declaredToModelName, throughModelName, throughFields, reverse) {\n  return {\n    get: function get() {\n      var _this$getClass4 = this.getClass(),\n          _this$getClass4$sessi = _this$getClass4.session,\n          DeclaredFromModel = _this$getClass4$sessi[declaredFromModelName],\n          DeclaredToModel = _this$getClass4$sessi[declaredToModelName],\n          ThroughModel = _this$getClass4$sessi[throughModelName];\n\n      var ThisModel = reverse ? DeclaredToModel : DeclaredFromModel;\n      var OtherModel = reverse ? DeclaredFromModel : DeclaredToModel;\n      var thisReferencingField = reverse ? throughFields.to : throughFields.from;\n      var otherReferencingField = reverse ? throughFields.from : throughFields.to;\n      var thisId = this.getId();\n      var throughQs = ThroughModel.filter(_defineProperty({}, thisReferencingField, thisId));\n      /**\n       * all IDs of instances of the other model that are\n       * referenced by any instance of the current model\n       */\n\n      var referencedOtherIds = new Set(throughQs.toRefArray().map(function (obj) {\n        return obj[otherReferencingField];\n      }));\n      /**\n       * selects all instances of other model that are referenced\n       * by any instance of the current model\n       */\n\n      var qs = OtherModel.filter(function (otherModelInstance) {\n        return referencedOtherIds.has(otherModelInstance[OtherModel.idAttribute]);\n      });\n      /**\n       * Allows adding OtherModel instances to be referenced by the current instance.\n       *\n       * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n       * to the first book's list of referenced authors.\n       *\n       * @return undefined\n       */\n\n      qs.add = function add() {\n        for (var _len = arguments.length, entities = new Array(_len), _key = 0; _key < _len; _key++) {\n          entities[_key] = arguments[_key];\n        }\n\n        var idsToAdd = new Set(entities.map(normalizeEntity));\n        var existingQs = throughQs.filter(function (through) {\n          return idsToAdd.has(through[otherReferencingField]);\n        });\n\n        if (existingQs.exists()) {\n          var existingIds = existingQs.toRefArray().map(function (through) {\n            return through[otherReferencingField];\n          });\n          throw new Error(\"Tried to add already existing \".concat(OtherModel.modelName, \" id(s) \").concat(existingIds, \" to the \").concat(ThisModel.modelName, \" instance with id \").concat(thisId));\n        }\n\n        idsToAdd.forEach(function (id) {\n          var _ThroughModel$create;\n\n          ThroughModel.create((_ThroughModel$create = {}, _defineProperty(_ThroughModel$create, otherReferencingField, id), _defineProperty(_ThroughModel$create, thisReferencingField, thisId), _ThroughModel$create));\n        });\n      };\n      /**\n       * Removes references to all OtherModel instances from the current model.\n       *\n       * E.g. Book.first().authors.clear() would cause the first book's list\n       * of referenced authors to become empty.\n       *\n       * @return undefined\n       */\n\n\n      qs.clear = function clear() {\n        throughQs[\"delete\"]();\n      };\n      /**\n       * Removes references to all passed OtherModel instances from the current model.\n       *\n       * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n       * IDs 1 and 2 to no longer be referenced by the first book.\n       *\n       * @return undefined\n       */\n\n\n      qs.remove = function remove() {\n        for (var _len2 = arguments.length, entities = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          entities[_key2] = arguments[_key2];\n        }\n\n        var idsToRemove = new Set(entities.map(normalizeEntity));\n        var entitiesToDelete = throughQs.filter(function (through) {\n          return idsToRemove.has(through[otherReferencingField]);\n        });\n\n        if (entitiesToDelete.count() !== idsToRemove.size) {\n          // Tried deleting non-existing entities.\n          var entitiesToDeleteIds = entitiesToDelete.toRefArray().map(function (through) {\n            return through[otherReferencingField];\n          });\n\n          var unexistingIds = _toConsumableArray(idsToRemove).filter(function (id) {\n            return !entitiesToDeleteIds.includes(id);\n          });\n\n          throw new Error(\"Tried to delete non-existing \".concat(OtherModel.modelName, \" id(s) \").concat(unexistingIds, \" from the \").concat(ThisModel.modelName, \" instance with id \").concat(thisId));\n        }\n\n        entitiesToDelete[\"delete\"]();\n      };\n\n      return qs;\n    },\n    set: function set() {\n      throw new Error(\"Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.\");\n    }\n  };\n}\n\nexport { attrDescriptor, forwardsManyToOneDescriptor, forwardsOneToOneDescriptor, backwardsOneToOneDescriptor, backwardsManyToOneDescriptor, manyToManyDescriptor };"],"mappings":"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"},"metadata":{},"sourceType":"module"}
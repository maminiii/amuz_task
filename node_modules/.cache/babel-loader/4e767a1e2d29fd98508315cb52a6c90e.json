{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\nconst initialState = {\n  num: 0\n};\nexport const numReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      return { ...state,\n        num: state.num + 1\n      };\n\n    default:\n      return state;\n  }\n};\nexport const add = () => ({\n  type: \"ADD\"\n});\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer\n  },\n  numReducer\n}); // add some initial fake data\n\nlet userList = [];\nlet postList = [];\n\nconst fetchUser = async () => {\n  try {\n    const userRes = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n    userList = userRes.data;\n    userList.forEach((user, idx) => {\n      store.dispatch(createUser({\n        id: idx + 1,\n        name: user.name,\n        username: user.username,\n        email: user.email,\n        address: user.address,\n        company: user.company,\n        phone: user.phone,\n        website: user.website\n      }));\n    });\n    console.log(\"##fetchUser end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchPost = async () => {\n  try {\n    const postRes = await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\n    userList.forEach(user => {\n      let i = 0;\n      postRes.data.forEach((post, idx) => {\n        if (post.userId === user.id) {\n          store.dispatch(createPost({\n            id: idx + 1,\n            userId: post.userId,\n            title: post.title,\n            completed: post.completed,\n            postId: i\n          }));\n          i++;\n        }\n      });\n    });\n    console.log(\"##fetchPost end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchComment = async itemId => {\n  try {\n    for (let idx = 0; idx < 200; idx++) {\n      const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`);\n      const commentList = commentRes.data;\n      commentList.forEach(comment => {\n        store.dispatch(createComment({\n          id: comment.id,\n          postId: comment.postId,\n          body: comment.body,\n          email: comment.email,\n          name: comment.name\n        }));\n      });\n    }\n\n    console.log(\"##fetchComment end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  fetchUser();\n  fetchPost();\n  fetchComment();\n};\n\ninit();\nexport default store;","map":{"version":3,"names":["configureStore","axios","reducer","currentPostReducer","createComment","createPost","createUser","ormReducer","initialState","num","numReducer","state","action","type","add","store","orm","currentPost","userList","postList","fetchUser","userRes","get","data","forEach","user","idx","dispatch","id","name","username","email","address","company","phone","website","console","log","e","fetchPost","postRes","i","post","userId","title","completed","postId","fetchComment","itemId","commentRes","commentList","comment","body","init"],"sources":["/Users/developer/task/task3/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\n\nconst initialState = {\n  num: 0,\n};\nexport const numReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      return {\n        ...state,\n        num: state.num + 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const add = () => ({\n  type: \"ADD\",\n});\n\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n  },\n  numReducer,\n});\n\n// add some initial fake data\nlet userList = [];\nlet postList = [];\nconst fetchUser = async () => {\n  try {\n    const userRes = await axios.get(\n      \"https://jsonplaceholder.typicode.com/users\"\n    );\n    userList = userRes.data;\n\n    userList.forEach((user, idx) => {\n      store.dispatch(\n        createUser({\n          id: idx + 1,\n          name: user.name,\n          username: user.username,\n          email: user.email,\n          address: user.address,\n          company: user.company,\n          phone: user.phone,\n          website: user.website,\n        })\n      );\n    });\n    console.log(\"##fetchUser end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchPost = async () => {\n  try {\n    const postRes = await axios.get(\n      \"https://jsonplaceholder.typicode.com/todos\"\n    );\n\n    userList.forEach((user) => {\n      let i = 0;\n\n      postRes.data.forEach((post, idx) => {\n        if (post.userId === user.id) {\n          store.dispatch(\n            createPost({\n              id: idx + 1,\n              userId: post.userId,\n              title: post.title,\n              completed: post.completed,\n              postId: i,\n            })\n          );\n          i++;\n        }\n      });\n    });\n    console.log(\"##fetchPost end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchComment = async (itemId) => {\n  try {\n    for (let idx = 0; idx < 200; idx++) {\n      const commentRes = await axios.get(\n        `https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`\n      );\n      const commentList = commentRes.data;\n\n      commentList.forEach((comment) => {\n        store.dispatch(\n          createComment({\n            id: comment.id,\n            postId: comment.postId,\n            body: comment.body,\n            email: comment.email,\n            name: comment.name,\n          })\n        );\n      });\n    }\n    console.log(\"##fetchComment end\");\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  fetchUser();\n  fetchPost();\n  fetchComment();\n};\n\ninit();\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getBatchToken } from \"immutable-ops\";\nimport { SUCCESS, UPDATE, DELETE } from \"./constants\";\nimport { warnDeprecated, clauseFiltersByAttribute } from \"./utils\";\n\nvar Session = /*#__PURE__*/function () {\n  /**\n   * Creates a new Session.\n   *\n   * @param  {Database} db - a {@link Database} instance\n   * @param  {Object} state - the database state\n   * @param  {Boolean} [withMutations] - whether the session should mutate data\n   * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n   *                                 mutated.\n   */\n  function Session(schema, db, state, withMutations, batchToken) {\n    var _this = this;\n\n    this.schema = schema;\n    this.db = db;\n    this.state = state || db.getEmptyState();\n    this.initialState = this.state;\n    this.withMutations = Boolean(withMutations);\n    this.batchToken = batchToken || getBatchToken();\n    this.modelData = {};\n    this.models = schema.getModelClasses();\n    this.sessionBoundModels = this.models.map(function (modelClass) {\n      function SessionBoundModel() {\n        return Reflect.construct(modelClass, arguments, SessionBoundModel); // eslint-disable-line prefer-rest-params\n      }\n\n      Reflect.setPrototypeOf(SessionBoundModel.prototype, modelClass.prototype);\n      Reflect.setPrototypeOf(SessionBoundModel, modelClass);\n      Object.defineProperty(_this, modelClass.modelName, {\n        get: function get() {\n          return SessionBoundModel;\n        }\n      });\n      SessionBoundModel.connect(_this);\n      return SessionBoundModel;\n    });\n  }\n\n  var _proto = Session.prototype;\n\n  _proto.getDataForModel = function getDataForModel(modelName) {\n    if (!this.modelData[modelName]) {\n      this.modelData[modelName] = {};\n    }\n\n    return this.modelData[modelName];\n  };\n\n  _proto.getModelData = function getModelData() {\n    return this.modelData;\n  };\n\n  _proto.markAccessed = function markAccessed(modelName, modelIds) {\n    var data = this.getDataForModel(modelName);\n\n    if (!data.accessedInstances) {\n      data.accessedInstances = {};\n    }\n\n    modelIds.forEach(function (id) {\n      data.accessedInstances[id] = true;\n    });\n  };\n\n  _proto.markFullTableScanned = function markFullTableScanned(modelName) {\n    var data = this.getDataForModel(modelName);\n    data.fullTableScanned = true;\n  };\n\n  _proto.markAccessedIndexes = function markAccessedIndexes(indexes) {\n    var _this2 = this;\n\n    indexes.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 3),\n          table = _ref2[0],\n          attr = _ref2[1],\n          value = _ref2[2];\n\n      var data = _this2.getDataForModel(table);\n\n      if (!data.accessedIndexes) {\n        data.accessedIndexes = {};\n      }\n\n      data.accessedIndexes[attr] = [].concat(_toConsumableArray(data.accessedIndexes[attr] || []), [value]);\n    });\n  };\n  /**\n   * Applies update to a model state.\n   *\n   * @private\n   * @param {Object} update - the update object. Must have keys\n   *                          `type`, `payload`.\n   */\n\n\n  _proto.applyUpdate = function applyUpdate(updateSpec) {\n    var tx = this._getTransaction(updateSpec);\n\n    var result = this.db.update(updateSpec, tx, this.state);\n    var status = result.status,\n        state = result.state,\n        payload = result.payload;\n\n    if (status !== SUCCESS) {\n      throw new Error(\"Applying update failed with status \".concat(status, \". Payload: \").concat(payload));\n    }\n\n    this.state = state;\n    return payload;\n  };\n\n  _proto.query = function query(querySpec) {\n    var result = this.db.query(querySpec, this.state);\n\n    this._markAccessedByQuery(querySpec, result);\n\n    return result;\n  };\n\n  _proto._getTransaction = function _getTransaction(updateSpec) {\n    var withMutations = this.withMutations;\n    var action = updateSpec.action;\n    var batchToken = this.batchToken;\n\n    if ([UPDATE, DELETE].includes(action)) {\n      batchToken = getBatchToken();\n    }\n\n    return {\n      batchToken: batchToken,\n      withMutations: withMutations\n    };\n  };\n\n  _proto._markAccessedByQuery = function _markAccessedByQuery(querySpec, result) {\n    var table = querySpec.table,\n        clauses = querySpec.clauses;\n    var rows = result.rows;\n    var idAttribute = this[table].idAttribute;\n    var accessedIds = new Set(rows.map(function (row) {\n      return row[idAttribute];\n    }));\n    var anyClauseFilteredByPk = clauses.some(function (clause) {\n      if (!clauseFiltersByAttribute(clause, idAttribute)) {\n        return false;\n      }\n      /**\n       * We previously knew which row we wanted to access,\n       * so there was no need to scan the entire table.\n       */\n\n\n      accessedIds.add(clause.payload[idAttribute]);\n      return true;\n    });\n    var accessedIndexes = [];\n    var indexes = this.state[table].indexes;\n    clauses.forEach(function (clause) {\n      Object.keys(indexes).forEach(function (attr) {\n        if (!clauseFiltersByAttribute(clause, attr)) {\n          return;\n        }\n\n        var value = clause.payload[attr];\n        accessedIndexes.push([table, attr, value]);\n      });\n    });\n\n    if (anyClauseFilteredByPk) {\n      /**\n       * The clauses have been ordered so that an indexed one was\n       * the first to have been evaluated, and thus only the row\n       * with the specified PK value has actually been accessed.\n       */\n      this.markAccessed(table, accessedIds);\n    } else if (accessedIndexes.length) {\n      /**\n       * At least one clause was optimized using indexes.\n       */\n      this.markAccessed(table, accessedIds);\n      this.markAccessedIndexes(accessedIndexes);\n    } else {\n      /**\n       * At least one clause could not be efficiently optimized\n       * or no clause was specified at all.\n       */\n      this.markFullTableScanned(table);\n    }\n  } // DEPRECATED AND REMOVED METHODS\n\n  /**\n   * @deprecated Access {@link Session#state} instead.\n   */\n  ;\n\n  _proto.getNextState = function getNextState() {\n    warnDeprecated(\"`Session.prototype.getNextState` has been deprecated. Access \" + \"the `Session.prototype.state` property instead.\");\n    return this.state;\n  }\n  /**\n   * @deprecated\n   * The Redux integration API is now decoupled from ORM and Session.<br>\n   * See the 0.9 migration guide in the GitHub repo.\n   */\n  ;\n\n  _proto.reduce = function reduce() {\n    throw new Error(\"`Session.prototype.reduce` has been removed. The Redux integration API \" + \"is now decoupled from ORM and Session - see the 0.9 migration guide \" + \"in the GitHub repo.\");\n  };\n\n  _createClass(Session, [{\n    key: \"accessedModelInstances\",\n    get: function get() {\n      return Object.entries(this.getModelData()).reduce(function (result, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        if (value.accessedInstances) {\n          result[key] = value.accessedInstances;\n        }\n\n        return result;\n      }, {});\n    }\n  }, {\n    key: \"fullTableScannedModels\",\n    get: function get() {\n      return Object.entries(this.getModelData()).reduce(function (result, _ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            value = _ref6[1];\n\n        if (value.fullTableScanned) {\n          result.push(key);\n        }\n\n        return result;\n      }, []);\n    }\n  }, {\n    key: \"accessedIndexes\",\n    get: function get() {\n      return Object.entries(this.getModelData()).reduce(function (result, _ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n\n        if (value.accessedIndexes) {\n          result[key] = value.accessedIndexes;\n        }\n\n        return result;\n      }, {});\n    }\n  }]);\n\n  return Session;\n}();\n\nexport default Session;","map":{"version":3,"names":["_toConsumableArray","_slicedToArray","_createClass","getBatchToken","SUCCESS","UPDATE","DELETE","warnDeprecated","clauseFiltersByAttribute","Session","schema","db","state","withMutations","batchToken","_this","getEmptyState","initialState","Boolean","modelData","models","getModelClasses","sessionBoundModels","map","modelClass","SessionBoundModel","Reflect","construct","arguments","setPrototypeOf","prototype","Object","defineProperty","modelName","get","connect","_proto","getDataForModel","getModelData","markAccessed","modelIds","data","accessedInstances","forEach","id","markFullTableScanned","fullTableScanned","markAccessedIndexes","indexes","_this2","_ref","_ref2","table","attr","value","accessedIndexes","concat","applyUpdate","updateSpec","tx","_getTransaction","result","update","status","payload","Error","query","querySpec","_markAccessedByQuery","action","includes","clauses","rows","idAttribute","accessedIds","Set","row","anyClauseFilteredByPk","some","clause","add","keys","push","length","getNextState","reduce","key","entries","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8"],"sources":["/Users/developer/task/task3/node_modules/redux-orm/es/Session.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getBatchToken } from \"immutable-ops\";\nimport { SUCCESS, UPDATE, DELETE } from \"./constants\";\nimport { warnDeprecated, clauseFiltersByAttribute } from \"./utils\";\n\nvar Session = /*#__PURE__*/function () {\n  /**\n   * Creates a new Session.\n   *\n   * @param  {Database} db - a {@link Database} instance\n   * @param  {Object} state - the database state\n   * @param  {Boolean} [withMutations] - whether the session should mutate data\n   * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n   *                                 mutated.\n   */\n  function Session(schema, db, state, withMutations, batchToken) {\n    var _this = this;\n\n    this.schema = schema;\n    this.db = db;\n    this.state = state || db.getEmptyState();\n    this.initialState = this.state;\n    this.withMutations = Boolean(withMutations);\n    this.batchToken = batchToken || getBatchToken();\n    this.modelData = {};\n    this.models = schema.getModelClasses();\n    this.sessionBoundModels = this.models.map(function (modelClass) {\n      function SessionBoundModel() {\n        return Reflect.construct(modelClass, arguments, SessionBoundModel); // eslint-disable-line prefer-rest-params\n      }\n\n      Reflect.setPrototypeOf(SessionBoundModel.prototype, modelClass.prototype);\n      Reflect.setPrototypeOf(SessionBoundModel, modelClass);\n      Object.defineProperty(_this, modelClass.modelName, {\n        get: function get() {\n          return SessionBoundModel;\n        }\n      });\n      SessionBoundModel.connect(_this);\n      return SessionBoundModel;\n    });\n  }\n\n  var _proto = Session.prototype;\n\n  _proto.getDataForModel = function getDataForModel(modelName) {\n    if (!this.modelData[modelName]) {\n      this.modelData[modelName] = {};\n    }\n\n    return this.modelData[modelName];\n  };\n\n  _proto.getModelData = function getModelData() {\n    return this.modelData;\n  };\n\n  _proto.markAccessed = function markAccessed(modelName, modelIds) {\n    var data = this.getDataForModel(modelName);\n\n    if (!data.accessedInstances) {\n      data.accessedInstances = {};\n    }\n\n    modelIds.forEach(function (id) {\n      data.accessedInstances[id] = true;\n    });\n  };\n\n  _proto.markFullTableScanned = function markFullTableScanned(modelName) {\n    var data = this.getDataForModel(modelName);\n    data.fullTableScanned = true;\n  };\n\n  _proto.markAccessedIndexes = function markAccessedIndexes(indexes) {\n    var _this2 = this;\n\n    indexes.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 3),\n          table = _ref2[0],\n          attr = _ref2[1],\n          value = _ref2[2];\n\n      var data = _this2.getDataForModel(table);\n\n      if (!data.accessedIndexes) {\n        data.accessedIndexes = {};\n      }\n\n      data.accessedIndexes[attr] = [].concat(_toConsumableArray(data.accessedIndexes[attr] || []), [value]);\n    });\n  };\n\n  /**\n   * Applies update to a model state.\n   *\n   * @private\n   * @param {Object} update - the update object. Must have keys\n   *                          `type`, `payload`.\n   */\n  _proto.applyUpdate = function applyUpdate(updateSpec) {\n    var tx = this._getTransaction(updateSpec);\n\n    var result = this.db.update(updateSpec, tx, this.state);\n    var status = result.status,\n        state = result.state,\n        payload = result.payload;\n\n    if (status !== SUCCESS) {\n      throw new Error(\"Applying update failed with status \".concat(status, \". Payload: \").concat(payload));\n    }\n\n    this.state = state;\n    return payload;\n  };\n\n  _proto.query = function query(querySpec) {\n    var result = this.db.query(querySpec, this.state);\n\n    this._markAccessedByQuery(querySpec, result);\n\n    return result;\n  };\n\n  _proto._getTransaction = function _getTransaction(updateSpec) {\n    var withMutations = this.withMutations;\n    var action = updateSpec.action;\n    var batchToken = this.batchToken;\n\n    if ([UPDATE, DELETE].includes(action)) {\n      batchToken = getBatchToken();\n    }\n\n    return {\n      batchToken: batchToken,\n      withMutations: withMutations\n    };\n  };\n\n  _proto._markAccessedByQuery = function _markAccessedByQuery(querySpec, result) {\n    var table = querySpec.table,\n        clauses = querySpec.clauses;\n    var rows = result.rows;\n    var idAttribute = this[table].idAttribute;\n    var accessedIds = new Set(rows.map(function (row) {\n      return row[idAttribute];\n    }));\n    var anyClauseFilteredByPk = clauses.some(function (clause) {\n      if (!clauseFiltersByAttribute(clause, idAttribute)) {\n        return false;\n      }\n      /**\n       * We previously knew which row we wanted to access,\n       * so there was no need to scan the entire table.\n       */\n\n\n      accessedIds.add(clause.payload[idAttribute]);\n      return true;\n    });\n    var accessedIndexes = [];\n    var indexes = this.state[table].indexes;\n    clauses.forEach(function (clause) {\n      Object.keys(indexes).forEach(function (attr) {\n        if (!clauseFiltersByAttribute(clause, attr)) {\n          return;\n        }\n\n        var value = clause.payload[attr];\n        accessedIndexes.push([table, attr, value]);\n      });\n    });\n\n    if (anyClauseFilteredByPk) {\n      /**\n       * The clauses have been ordered so that an indexed one was\n       * the first to have been evaluated, and thus only the row\n       * with the specified PK value has actually been accessed.\n       */\n      this.markAccessed(table, accessedIds);\n    } else if (accessedIndexes.length) {\n      /**\n       * At least one clause was optimized using indexes.\n       */\n      this.markAccessed(table, accessedIds);\n      this.markAccessedIndexes(accessedIndexes);\n    } else {\n      /**\n       * At least one clause could not be efficiently optimized\n       * or no clause was specified at all.\n       */\n      this.markFullTableScanned(table);\n    }\n  } // DEPRECATED AND REMOVED METHODS\n\n  /**\n   * @deprecated Access {@link Session#state} instead.\n   */\n  ;\n\n  _proto.getNextState = function getNextState() {\n    warnDeprecated(\"`Session.prototype.getNextState` has been deprecated. Access \" + \"the `Session.prototype.state` property instead.\");\n    return this.state;\n  }\n  /**\n   * @deprecated\n   * The Redux integration API is now decoupled from ORM and Session.<br>\n   * See the 0.9 migration guide in the GitHub repo.\n   */\n  ;\n\n  _proto.reduce = function reduce() {\n    throw new Error(\"`Session.prototype.reduce` has been removed. The Redux integration API \" + \"is now decoupled from ORM and Session - see the 0.9 migration guide \" + \"in the GitHub repo.\");\n  };\n\n  _createClass(Session, [{\n    key: \"accessedModelInstances\",\n    get: function get() {\n      return Object.entries(this.getModelData()).reduce(function (result, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        if (value.accessedInstances) {\n          result[key] = value.accessedInstances;\n        }\n\n        return result;\n      }, {});\n    }\n  }, {\n    key: \"fullTableScannedModels\",\n    get: function get() {\n      return Object.entries(this.getModelData()).reduce(function (result, _ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            value = _ref6[1];\n\n        if (value.fullTableScanned) {\n          result.push(key);\n        }\n\n        return result;\n      }, []);\n    }\n  }, {\n    key: \"accessedIndexes\",\n    get: function get() {\n      return Object.entries(this.getModelData()).reduce(function (result, _ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n\n        if (value.accessedIndexes) {\n          result[key] = value.accessedIndexes;\n        }\n\n        return result;\n      }, {});\n    }\n  }]);\n\n  return Session;\n}();\n\nexport default Session;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
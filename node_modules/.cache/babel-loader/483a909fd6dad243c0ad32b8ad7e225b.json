{"ast":null,"code":"import { createAction } from \"@reduxjs/toolkit\";\nimport Model, { attr, fk } from \"redux-orm\"; // =====ACTIONS=====\n\nexport const createPost = createAction(\"models/posts/create\");\nexport const deletePost = createAction(\"models/posts/delete\"); // =====MODEL=====\n\nexport class Post extends Model {\n  static get fields() {\n    return {\n      id: attr(),\n      userId: fk({\n        to: \"User\",\n        as: \"user\",\n        relatedName: \"posts\"\n      }),\n      postId: attr(),\n      title: attr(),\n      completed: attr()\n    };\n  }\n\n  static reducer(_ref, Post, session) {\n    let {\n      type,\n      payload\n    } = _ref;\n\n    switch (type) {\n      case createPost.type:\n        {\n          console.log(\"##payload\", payload);\n\n          if (!payload.title || !payload.userId || !payload.id) {\n            console.warn(\"Unable to create a post with no content or user\");\n          } else {\n            Post.upsert(payload);\n          }\n\n          break;\n        }\n\n      case deletePost.type:\n        {\n          let post = Post.withId(payload);\n          post.delete();\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n}\nPost.modelName = \"Post\";","map":{"version":3,"names":["createAction","Model","attr","fk","createPost","deletePost","Post","fields","id","userId","to","as","relatedName","postId","title","completed","reducer","session","type","payload","console","log","warn","upsert","post","withId","delete","modelName"],"sources":["/Users/developer/task/task3/src/store/modelDucks/Post.js"],"sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nimport Model, { attr, fk } from \"redux-orm\";\n\n// =====ACTIONS=====\nexport const createPost = createAction(\"models/posts/create\");\nexport const deletePost = createAction(\"models/posts/delete\");\n\n// =====MODEL=====\nexport class Post extends Model {\n  static modelName = \"Post\";\n\n  static get fields() {\n    return {\n      id: attr(),\n      userId: fk({\n        to: \"User\",\n        as: \"user\",\n        relatedName: \"posts\",\n      }),\n      postId: attr(),\n      title: attr(),\n      completed: attr(),\n    };\n  }\n\n  static reducer({ type, payload }, Post, session) {\n    switch (type) {\n      case createPost.type: {\n        console.log(\"##payload\", payload);\n        if (!payload.title || !payload.userId || !payload.id) {\n          console.warn(\"Unable to create a post with no content or user\");\n        } else {\n          Post.upsert(payload);\n        }\n        break;\n      }\n      case deletePost.type: {\n        let post = Post.withId(payload);\n        post.delete();\n        break;\n      }\n      default:\n        break;\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,IAAhB,EAAsBC,EAAtB,QAAgC,WAAhC,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAGJ,YAAY,CAAC,qBAAD,CAA/B;AACP,OAAO,MAAMK,UAAU,GAAGL,YAAY,CAAC,qBAAD,CAA/B,C,CAEP;;AACA,OAAO,MAAMM,IAAN,SAAmBL,KAAnB,CAAyB;EAGb,WAANM,MAAM,GAAG;IAClB,OAAO;MACLC,EAAE,EAAEN,IAAI,EADH;MAELO,MAAM,EAAEN,EAAE,CAAC;QACTO,EAAE,EAAE,MADK;QAETC,EAAE,EAAE,MAFK;QAGTC,WAAW,EAAE;MAHJ,CAAD,CAFL;MAOLC,MAAM,EAAEX,IAAI,EAPP;MAQLY,KAAK,EAAEZ,IAAI,EARN;MASLa,SAAS,EAAEb,IAAI;IATV,CAAP;EAWD;;EAEa,OAAPc,OAAO,OAAoBV,IAApB,EAA0BW,OAA1B,EAAmC;IAAA,IAAlC;MAAEC,IAAF;MAAQC;IAAR,CAAkC;;IAC/C,QAAQD,IAAR;MACE,KAAKd,UAAU,CAACc,IAAhB;QAAsB;UACpBE,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB;;UACA,IAAI,CAACA,OAAO,CAACL,KAAT,IAAkB,CAACK,OAAO,CAACV,MAA3B,IAAqC,CAACU,OAAO,CAACX,EAAlD,EAAsD;YACpDY,OAAO,CAACE,IAAR,CAAa,iDAAb;UACD,CAFD,MAEO;YACLhB,IAAI,CAACiB,MAAL,CAAYJ,OAAZ;UACD;;UACD;QACD;;MACD,KAAKd,UAAU,CAACa,IAAhB;QAAsB;UACpB,IAAIM,IAAI,GAAGlB,IAAI,CAACmB,MAAL,CAAYN,OAAZ,CAAX;UACAK,IAAI,CAACE,MAAL;UACA;QACD;;MACD;QACE;IAhBJ;EAkBD;;AApC6B;AAAnBpB,I,CACJqB,S,GAAY,M"},"metadata":{},"sourceType":"module"}
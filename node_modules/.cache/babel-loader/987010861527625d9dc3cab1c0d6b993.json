{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer\n  }\n}); // add some initial fake data\n\nconst fetchUser = async () => {\n  try {\n    const userRes = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n    const userList = userRes.data;\n    userList.forEach((user, idx) => {\n      store.dispatch(createUser({\n        id: idx + 1,\n        name: user.name,\n        username: user.username,\n        email: user.email,\n        address: user.address,\n        company: user.company,\n        phone: user.phone,\n        website: user.website\n      }));\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchPost = async () => {\n  try {\n    const postRes = await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\n    const postList = postRes.data;\n    postList.forEach((post, idx) => {\n      store.dispatch(createPost({\n        id: idx + 1,\n        userId: post.userId,\n        title: post.title,\n        completed: post.completed\n      }));\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchComment = async itemId => {\n  try {\n    const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${itemId}`);\n    const commentList = commentRes.data;\n    commentList.forEach((comment, idx) => {\n      store.dispatch(createComment({\n        id: idx + 1,\n        postId: comment.postId,\n        body: comment.body,\n        email: comment.email,\n        name: comment.name\n      }));\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  fetchUser();\n  fetchPost();\n\n  for (let idx = 0; idx < 200; idx++) fetchComment(idx + 1);\n};\n\ninit();\nexport default store;","map":{"version":3,"names":["configureStore","axios","reducer","currentPostReducer","createComment","createPost","createUser","ormReducer","store","orm","currentPost","fetchUser","userRes","get","userList","data","forEach","user","idx","dispatch","id","name","username","email","address","company","phone","website","e","console","log","fetchPost","postRes","postList","post","userId","title","completed","fetchComment","itemId","commentRes","commentList","comment","postId","body","init"],"sources":["/Users/developer/task/task3/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\n\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n  },\n});\n\n// add some initial fake data\nconst fetchUser = async () => {\n  try {\n    const userRes = await axios.get(\n      \"https://jsonplaceholder.typicode.com/users\"\n    );\n    const userList = userRes.data;\n\n    userList.forEach((user, idx) => {\n      store.dispatch(\n        createUser({\n          id: idx + 1,\n          name: user.name,\n          username: user.username,\n          email: user.email,\n          address: user.address,\n          company: user.company,\n          phone: user.phone,\n          website: user.website,\n        })\n      );\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchPost = async () => {\n  try {\n    const postRes = await axios.get(\n      \"https://jsonplaceholder.typicode.com/todos\"\n    );\n    const postList = postRes.data;\n    postList.forEach((post, idx) => {\n      store.dispatch(\n        createPost({\n          id: idx + 1,\n          userId: post.userId,\n          title: post.title,\n          completed: post.completed,\n        })\n      );\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst fetchComment = async (itemId) => {\n  try {\n    const commentRes = await axios.get(\n      `https://jsonplaceholder.typicode.com/comments?postId=${itemId}`\n    );\n    const commentList = commentRes.data;\n    commentList.forEach((comment, idx) => {\n      store.dispatch(\n        createComment({\n          id: idx + 1,\n          postId: comment.postId,\n          body: comment.body,\n          email: comment.email,\n          name: comment.name,\n        })\n      );\n    });\n  } catch (e) {\n    console.log(\"##error\", e);\n  }\n};\n\nconst init = () => {\n  fetchUser();\n  fetchPost();\n  for (let idx = 0; idx < 200; idx++) fetchComment(idx + 1);\n};\n\ninit();\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
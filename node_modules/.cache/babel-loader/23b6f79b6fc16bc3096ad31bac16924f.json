{"ast":null,"code":"import { createSelector } from \"redux-orm\";\nimport orm from \"../orm\"; // =====SELECTORS=====\n// ALL POSTS\n// returns all posts, with the user's name included\n\nexport const postsSelector = createSelector(orm, session => {\n  const postModels = session.Post.all().toModelArray();\n  const formattedPosts = postModels.map(post => {\n    let name = \"\";\n\n    if (!post.user) {\n      console.warn(\"No user model found for post: \", post);\n    } else {\n      name = post.user.name;\n    }\n\n    return {\n      id: post.id,\n      content: post.content,\n      name\n    };\n  });\n  return formattedPosts;\n}); // CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\n\nexport const currentUserPostsSelector = createSelector([orm, state => state.currentUser], (session, currentUser) => {\n  if (currentUser === undefined || currentUser === null) return [];\n  const postModels = session.Post.all().toModelArray();\n  return postModels.flatMap(post => {\n    if (post.user.id === currentUser) {\n      return [{\n        id: post.id,\n        content: post.content,\n        name: post.user.name\n      }];\n    } else {\n      return [];\n    }\n  });\n}); // POSTS BY ID\n// e.g.   const userPosts = useSelector(state => userPostsSelector(state, id));\n// would return an array of posts for the user with the given id\n// (redux-orm style, not used in app)\n\nexport const userPostsSelector = createSelector([orm.User, orm.User.posts], (user, posts) => {\n  if (!posts) return [];\n  return posts.map(post => ({\n    id: post.id,\n    content: post.content,\n    name: user.name\n  }));\n});","map":{"version":3,"names":["createSelector","orm","postsSelector","session","postModels","Post","all","toModelArray","formattedPosts","map","post","name","user","console","warn","id","content","currentUserPostsSelector","state","currentUser","undefined","flatMap","userPostsSelector","User","posts"],"sources":["/Users/developer/task/task3/src/store/modelDucks/PostSelectors.js"],"sourcesContent":["import { createSelector } from \"redux-orm\";\nimport orm from \"../orm\";\n\n// =====SELECTORS=====\n// ALL POSTS\n// returns all posts, with the user's name included\nexport const postsSelector = createSelector(orm, (session) => {\n  const postModels = session.Post.all().toModelArray();\n  const formattedPosts = postModels.map((post) => {\n    let name = \"\";\n    if (!post.user) {\n      console.warn(\"No user model found for post: \", post);\n    } else {\n      name = post.user.name;\n    }\n    return {\n      id: post.id,\n      content: post.content,\n      name,\n    };\n  });\n  return formattedPosts;\n});\n\n// CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\nexport const currentUserPostsSelector = createSelector(\n  [orm, (state) => state.currentUser],\n  (session, currentUser) => {\n    if (currentUser === undefined || currentUser === null) return [];\n    const postModels = session.Post.all().toModelArray();\n    return postModels.flatMap((post) => {\n      if (post.user.id === currentUser) {\n        return [\n          {\n            id: post.id,\n            content: post.content,\n            name: post.user.name,\n          },\n        ];\n      } else {\n        return [];\n      }\n    });\n  }\n);\n\n// POSTS BY ID\n// e.g.   const userPosts = useSelector(state => userPostsSelector(state, id));\n// would return an array of posts for the user with the given id\n// (redux-orm style, not used in app)\nexport const userPostsSelector = createSelector(\n  [orm.User, orm.User.posts],\n  (user, posts) => {\n    if (!posts) return [];\n    return posts.map((post) => ({\n      id: post.id,\n      content: post.content,\n      name: user.name,\n    }));\n  }\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGF,cAAc,CAACC,GAAD,EAAOE,OAAD,IAAa;EAC5D,MAAMC,UAAU,GAAGD,OAAO,CAACE,IAAR,CAAaC,GAAb,GAAmBC,YAAnB,EAAnB;EACA,MAAMC,cAAc,GAAGJ,UAAU,CAACK,GAAX,CAAgBC,IAAD,IAAU;IAC9C,IAAIC,IAAI,GAAG,EAAX;;IACA,IAAI,CAACD,IAAI,CAACE,IAAV,EAAgB;MACdC,OAAO,CAACC,IAAR,CAAa,gCAAb,EAA+CJ,IAA/C;IACD,CAFD,MAEO;MACLC,IAAI,GAAGD,IAAI,CAACE,IAAL,CAAUD,IAAjB;IACD;;IACD,OAAO;MACLI,EAAE,EAAEL,IAAI,CAACK,EADJ;MAELC,OAAO,EAAEN,IAAI,CAACM,OAFT;MAGLL;IAHK,CAAP;EAKD,CAZsB,CAAvB;EAaA,OAAOH,cAAP;AACD,CAhB0C,CAApC,C,CAkBP;AACA;;AACA,OAAO,MAAMS,wBAAwB,GAAGjB,cAAc,CACpD,CAACC,GAAD,EAAOiB,KAAD,IAAWA,KAAK,CAACC,WAAvB,CADoD,EAEpD,CAAChB,OAAD,EAAUgB,WAAV,KAA0B;EACxB,IAAIA,WAAW,KAAKC,SAAhB,IAA6BD,WAAW,KAAK,IAAjD,EAAuD,OAAO,EAAP;EACvD,MAAMf,UAAU,GAAGD,OAAO,CAACE,IAAR,CAAaC,GAAb,GAAmBC,YAAnB,EAAnB;EACA,OAAOH,UAAU,CAACiB,OAAX,CAAoBX,IAAD,IAAU;IAClC,IAAIA,IAAI,CAACE,IAAL,CAAUG,EAAV,KAAiBI,WAArB,EAAkC;MAChC,OAAO,CACL;QACEJ,EAAE,EAAEL,IAAI,CAACK,EADX;QAEEC,OAAO,EAAEN,IAAI,CAACM,OAFhB;QAGEL,IAAI,EAAED,IAAI,CAACE,IAAL,CAAUD;MAHlB,CADK,CAAP;IAOD,CARD,MAQO;MACL,OAAO,EAAP;IACD;EACF,CAZM,CAAP;AAaD,CAlBmD,CAA/C,C,CAqBP;AACA;AACA;AACA;;AACA,OAAO,MAAMW,iBAAiB,GAAGtB,cAAc,CAC7C,CAACC,GAAG,CAACsB,IAAL,EAAWtB,GAAG,CAACsB,IAAJ,CAASC,KAApB,CAD6C,EAE7C,CAACZ,IAAD,EAAOY,KAAP,KAAiB;EACf,IAAI,CAACA,KAAL,EAAY,OAAO,EAAP;EACZ,OAAOA,KAAK,CAACf,GAAN,CAAWC,IAAD,KAAW;IAC1BK,EAAE,EAAEL,IAAI,CAACK,EADiB;IAE1BC,OAAO,EAAEN,IAAI,CAACM,OAFY;IAG1BL,IAAI,EAAEC,IAAI,CAACD;EAHe,CAAX,CAAV,CAAP;AAKD,CAT4C,CAAxC"},"metadata":{},"sourceType":"module"}
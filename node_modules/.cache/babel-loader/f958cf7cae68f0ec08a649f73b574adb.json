{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { createSelector } from \"redux-orm\";\nimport { atomSelectedPostId } from \"../../data/atoms\";\nimport orm from \"../orm\"; // =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\n\nexport const commentsSelector = _s(createSelector(orm, _s(session => {\n  _s();\n\n  const postId = useRecoilValue(atomSelectedPostId);\n  const [commentList, setCommentList] = useState([]);\n  console.log(\"##postId\", postId);\n\n  const fetchComment = async itemId => {\n    try {\n      const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${itemId + 1}`);\n      console.log(\"##in fetch comment\");\n      setCommentList([...commentRes.data]);\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  useLayoutEffect(() => {\n    fetchComment(postId);\n  }, []);\n  let formattedComments = [];\n  useLayoutEffect(() => {\n    console.log(\"##commentList\", commentList);\n    const commentModels = commentList;\n    formattedComments = commentModels.map(comment => {\n      let postId = \"\";\n\n      if (!comment.postId) {\n        console.warn(\"No post model found for comment: \", comment);\n      } else {\n        postId = comment.postId;\n      }\n\n      return {\n        id: comment.id,\n        postId,\n        email: comment.email,\n        body: comment.body,\n        name: comment.name\n      };\n    });\n  }, [commentList]);\n  return formattedComments;\n}, \"17Mq0gOCPiOZLpcgOCkv4RY+R2Q=\", false, function () {\n  return [useRecoilValue];\n})), \"17Mq0gOCPiOZLpcgOCkv4RY+R2Q=\", false, function () {\n  return [useRecoilValue];\n}); // CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\n\nexport const currentPostCommentsSelector = createSelector([orm, state => state.currentPost], (session, currentPost) => {\n  if (currentPost === undefined || currentPost === null) return 1; // const commentModels = session.Post.all().toModelArray();\n  // return commentModels.flatMap((post) => {\n  //   if (post.user.id === currentPost) {\n  //     return [\n  //       {\n  //         id: post.id,\n  //         content: post.content,\n  //         name: post.user.name,\n  //       },\n  //     ];\n  //   } else {\n  //     return [];\n  //   }\n  // });\n\n  console.log(\"##currentPost\", currentPost);\n  return currentPost;\n}); // POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\n\nexport const postCommentsSelector = createSelector([orm.Post, orm.Post.comments], (post, comments) => {\n  if (!comments) return [];\n  return comments.map(comment => ({\n    id: comment.id,\n    postId: post.id,\n    email: comment.email,\n    body: comment.body,\n    name: comment.name\n  }));\n});","map":{"version":3,"names":["axios","useLayoutEffect","useState","useRecoilValue","createSelector","atomSelectedPostId","orm","commentsSelector","session","postId","commentList","setCommentList","console","log","fetchComment","itemId","commentRes","get","data","e","formattedComments","commentModels","map","comment","warn","id","email","body","name","currentPostCommentsSelector","state","currentPost","undefined","postCommentsSelector","Post","comments","post"],"sources":["/Users/developer/task/task3/src/store/modelDucks/CommentSelectors.js"],"sourcesContent":["import axios from \"axios\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { createSelector } from \"redux-orm\";\nimport { atomSelectedPostId } from \"../../data/atoms\";\nimport orm from \"../orm\";\n// =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\n\nexport const commentsSelector = createSelector(orm, (session) => {\n  const postId = useRecoilValue(atomSelectedPostId);\n  const [commentList, setCommentList] = useState([]);\n  console.log(\"##postId\", postId);\n  const fetchComment = async (itemId) => {\n    try {\n      const commentRes = await axios.get(\n        `https://jsonplaceholder.typicode.com/comments?postId=${itemId + 1}`\n      );\n      console.log(\"##in fetch comment\");\n      setCommentList([...commentRes.data]);\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n  useLayoutEffect(() => {\n    fetchComment(postId);\n  }, []);\n\n  let formattedComments = [];\n  useLayoutEffect(() => {\n    console.log(\"##commentList\", commentList);\n    const commentModels = commentList;\n    formattedComments = commentModels.map((comment) => {\n      let postId = \"\";\n      if (!comment.postId) {\n        console.warn(\"No post model found for comment: \", comment);\n      } else {\n        postId = comment.postId;\n      }\n      return {\n        id: comment.id,\n        postId,\n        email: comment.email,\n        body: comment.body,\n        name: comment.name,\n      };\n    });\n  }, [commentList]);\n\n  return formattedComments;\n});\n\n// CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\nexport const currentPostCommentsSelector = createSelector(\n  [orm, (state) => state.currentPost],\n  (session, currentPost) => {\n    if (currentPost === undefined || currentPost === null) return 1;\n    // const commentModels = session.Post.all().toModelArray();\n    // return commentModels.flatMap((post) => {\n    //   if (post.user.id === currentPost) {\n    //     return [\n    //       {\n    //         id: post.id,\n    //         content: post.content,\n    //         name: post.user.name,\n    //       },\n    //     ];\n    //   } else {\n    //     return [];\n    //   }\n    // });\n    console.log(\"##currentPost\", currentPost);\n    return currentPost;\n  }\n);\n\n// POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\nexport const postCommentsSelector = createSelector(\n  [orm.Post, orm.Post.comments],\n  (post, comments) => {\n    if (!comments) return [];\n    return comments.map((comment) => ({\n      id: comment.id,\n      postId: post.id,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    }));\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
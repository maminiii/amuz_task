{"ast":null,"code":"import { createSelector } from \"redux-orm\";\nimport orm from \"../orm\"; // =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\n\nexport const commentsSelector = createSelector(orm, session => {\n  const commentModels = session.Comment.all().toModelArray();\n  const formattedComments = commentModels.map(comment => {\n    let postId = \"\";\n\n    if (!comment.postId) {\n      console.warn(\"No post model found for comment: \", comment);\n    } else {\n      postId = comment.postId;\n    }\n\n    return {\n      id: comment.id,\n      postId,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name\n    };\n  });\n  return formattedComments;\n}); // POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\n\nexport const postCommentsSelector = createSelector([orm.Post, orm.Post.comments], (post, comments) => {\n  if (!comments) return [];\n  return comments.map(comment => ({\n    id: comment.id,\n    postId: post.id,\n    email: comment.email,\n    body: comment.body,\n    name: comment.name\n  }));\n});","map":{"version":3,"names":["createSelector","orm","commentsSelector","session","commentModels","Comment","all","toModelArray","formattedComments","map","comment","postId","console","warn","id","email","body","name","postCommentsSelector","Post","comments","post"],"sources":["/Users/developer/task/task3/src/store/modelDucks/CommentSelectors.js"],"sourcesContent":["import { createSelector } from \"redux-orm\";\n\nimport orm from \"../orm\";\n// =====SELECTORS=====\n// ALL POSTS\n// returns all comments, with the post's name included\n\nexport const commentsSelector = createSelector(orm, (session) => {\n  const commentModels = session.Comment.all().toModelArray();\n\n  const formattedComments = commentModels.map((comment) => {\n    let postId = \"\";\n    if (!comment.postId) {\n      console.warn(\"No post model found for comment: \", comment);\n    } else {\n      postId = comment.postId;\n    }\n    return {\n      id: comment.id,\n      postId,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    };\n  });\n  return formattedComments;\n});\n\n// POSTS BY ID\n// e.g.   const postComments = useSelector(state => postCommentsSelector(state, id));\n// would return an array of comments for the post with the given id\n// (redux-orm style, not used in app)\nexport const postCommentsSelector = createSelector(\n  [orm.Post, orm.Post.comments],\n  (post, comments) => {\n    if (!comments) return [];\n    return comments.map((comment) => ({\n      id: comment.id,\n      postId: post.id,\n      email: comment.email,\n      body: comment.body,\n      name: comment.name,\n    }));\n  }\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AAEA,OAAOC,GAAP,MAAgB,QAAhB,C,CACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,cAAc,CAACC,GAAD,EAAOE,OAAD,IAAa;EAC/D,MAAMC,aAAa,GAAGD,OAAO,CAACE,OAAR,CAAgBC,GAAhB,GAAsBC,YAAtB,EAAtB;EAEA,MAAMC,iBAAiB,GAAGJ,aAAa,CAACK,GAAd,CAAmBC,OAAD,IAAa;IACvD,IAAIC,MAAM,GAAG,EAAb;;IACA,IAAI,CAACD,OAAO,CAACC,MAAb,EAAqB;MACnBC,OAAO,CAACC,IAAR,CAAa,mCAAb,EAAkDH,OAAlD;IACD,CAFD,MAEO;MACLC,MAAM,GAAGD,OAAO,CAACC,MAAjB;IACD;;IACD,OAAO;MACLG,EAAE,EAAEJ,OAAO,CAACI,EADP;MAELH,MAFK;MAGLI,KAAK,EAAEL,OAAO,CAACK,KAHV;MAILC,IAAI,EAAEN,OAAO,CAACM,IAJT;MAKLC,IAAI,EAAEP,OAAO,CAACO;IALT,CAAP;EAOD,CAdyB,CAA1B;EAeA,OAAOT,iBAAP;AACD,CAnB6C,CAAvC,C,CAqBP;AACA;AACA;AACA;;AACA,OAAO,MAAMU,oBAAoB,GAAGlB,cAAc,CAChD,CAACC,GAAG,CAACkB,IAAL,EAAWlB,GAAG,CAACkB,IAAJ,CAASC,QAApB,CADgD,EAEhD,CAACC,IAAD,EAAOD,QAAP,KAAoB;EAClB,IAAI,CAACA,QAAL,EAAe,OAAO,EAAP;EACf,OAAOA,QAAQ,CAACX,GAAT,CAAcC,OAAD,KAAc;IAChCI,EAAE,EAAEJ,OAAO,CAACI,EADoB;IAEhCH,MAAM,EAAEU,IAAI,CAACP,EAFmB;IAGhCC,KAAK,EAAEL,OAAO,CAACK,KAHiB;IAIhCC,IAAI,EAAEN,OAAO,CAACM,IAJkB;IAKhCC,IAAI,EAAEP,OAAO,CAACO;EALkB,CAAd,CAAb,CAAP;AAOD,CAX+C,CAA3C"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { createSelectorCreator } from \"reselect\";\nimport createCachedSelector, { FlatMapCache } from \"re-reselect\";\nimport { memoize } from \"./memoize\";\nimport { ORM } from \"./ORM\";\nimport SelectorSpec from \"./selectors/SelectorSpec\";\nimport MapSelectorSpec from \"./selectors/MapSelectorSpec\";\n/**\n * @module redux\n * @desc Provides functions for integration with Redux.\n */\n\n/**\n * Calls all models' reducers if they exist.\n *\n * @return {undefined}\n * @global\n */\n\nexport function defaultUpdater(session, action) {\n  session.sessionBoundModels.forEach(function (modelClass) {\n    if (typeof modelClass.reducer === \"function\") {\n      // This calls this.applyUpdate to update this.state\n      modelClass.reducer(action, modelClass, session);\n    }\n  });\n}\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\n\nexport function createReducer(orm) {\n  var updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultUpdater;\n  return function (state, action) {\n    var session = orm.session(state || orm.getEmptyState());\n    updater(session, action);\n    return session.state;\n  };\n}\n/**\n * @private\n * @param {SelectorSpec} spec\n */\n\nfunction createSelectorFromSpec(spec) {\n  if (spec instanceof MapSelectorSpec) {\n    var parentSelector = createSelectorFromSpec(spec.parent);\n    return spec.createResultFunc(parentSelector);\n  }\n\n  return createCachedSelector(spec.dependencies, spec.resultFunc)({\n    keySelector: spec.keySelector,\n    cacheObject: new FlatMapCache(),\n    selectorCreator: createSelector // eslint-disable-line no-use-before-define\n\n  });\n}\n/**\n * Tries to find ORM instance using the argument.\n * @private\n * @param {*} arg\n */\n\n\nfunction toORM(arg) {\n  /* eslint-disable no-underscore-dangle */\n  if (arg instanceof ORM) {\n    return arg;\n  }\n\n  if (arg instanceof SelectorSpec) {\n    return arg._orm;\n  }\n\n  return false;\n}\n\nvar selectorCache = new Map();\nvar SELECTOR_KEY = Symbol[\"for\"](\"REDUX_ORM_SELECTOR\");\n/**\n * @private\n * @param {function|ORM|SelectorSpec} arg\n */\n\nfunction toSelector(arg) {\n  if (typeof arg === \"function\") {\n    return arg;\n  }\n\n  if (arg instanceof ORM) {\n    return arg.stateSelector;\n  }\n\n  if (arg instanceof MapSelectorSpec) {\n    // the argument to map() needs to be callable\n    arg.selector = toSelector(arg.selector);\n  }\n\n  if (arg instanceof SelectorSpec) {\n    var orm = arg.orm,\n        cachePath = arg.cachePath;\n    var level; // the selector cache for the spec's ORM\n\n    if (!selectorCache.has(orm)) {\n      selectorCache.set(orm, new Map());\n    }\n\n    var ormSelectors = selectorCache.get(orm);\n    /**\n     * Drill down into selector map by cachePath.\n     *\n     * The selector itself is stored under a special SELECTOR_KEY\n     * so that we can store selectors below it as well.\n     */\n\n    level = ormSelectors;\n\n    for (var i = 0; i < cachePath.length; ++i) {\n      var storageKey = cachePath[i];\n\n      if (!level.has(storageKey)) {\n        level.set(storageKey, new Map());\n      }\n\n      level = level.get(storageKey);\n    }\n\n    if (level && level.has(SELECTOR_KEY)) {\n      // Cache hit: the selector has been created before\n      return level.get(SELECTOR_KEY);\n    } // Cache miss: the selector needs to be created\n\n\n    var selector = createSelectorFromSpec(arg); // Save the selector at the cachePath position\n\n    level.set(SELECTOR_KEY, selector);\n    return selector;\n  }\n\n  throw new Error(\"Failed to interpret selector argument: \".concat(JSON.stringify(arg), \" of type \").concat(_typeof(arg)));\n}\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, any of the arguments\n * you pass first will be considered selectors and mapped\n * to their outputs, like in `reselect`.\n *\n * Here are some example selectors:\n *\n * ```javascript\n * // orm is an instance of ORM\n * // reduxState is the state of a Redux store\n * const books = createSelector(orm.Book);\n * books(reduxState) // array of book refs\n *\n * const bookAuthors = createSelector(orm.Book.authors);\n * bookAuthors(reduxState) // two-dimensional array of author refs for each book\n * ```\n * Selectors can easily be applied to related models:\n * ```javascript\n * const bookAuthorNames = createSelector(\n *     orm.Book.authors.map(orm.Author.name),\n * );\n * bookAuthorNames(reduxState, 8) // names of all authors of book with ID 8\n * bookAuthorNames(reduxState, [8, 9]) // 2D array of names of all authors of books with IDs 8 and 9\n * ```\n * Also note that `orm.Author.name` did not need to be wrapped in another `createSelector` call,\n * although that would be possible.\n *\n * For more complex calculations you can access\n * entire session objects by passing an ORM instance.\n * ```javascript\n * const freshBananasCost = createSelector(\n *     orm,\n *     session => {\n *        const banana = session.Product.get({\n *            name: \"Banana\",\n *        });\n *        // amount of fresh bananas in shopping cart\n *        const amount = session.ShoppingCart.filter({\n *            product_id: banana.id,\n *            is_fresh: true,\n *        }).count();\n *        return `USD ${amount * banana.price}`;\n *     }\n * );\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use pure rendering in your React components\n * for performance gains.\n *\n * @global\n *\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\n\n\nexport function createSelector() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (!args.length) {\n    throw new Error(\"Cannot create a selector without arguments.\");\n  }\n\n  var resultArg = args.pop();\n  var dependencies = Array.isArray(args[0]) ? args[0] : args;\n  var orm = dependencies.map(toORM).find(Boolean);\n  var inputFuncs = dependencies.map(toSelector);\n\n  if (typeof resultArg === \"function\") {\n    if (!orm) {\n      throw new Error(\"Failed to resolve the current ORM database state. Please pass an ORM instance or an ORM selector as an argument to `createSelector()`.\");\n    } else if (!orm.stateSelector) {\n      throw new Error(\"Failed to resolve the current ORM database state. Please pass an object to the ORM constructor that specifies a `stateSelector` function.\");\n    } else if (typeof orm.stateSelector !== \"function\") {\n      throw new Error(\"Failed to resolve the current ORM database state. Please pass a function when specifying the ORM's `stateSelector`. Received: \".concat(JSON.stringify(orm.stateSelector), \" of type \").concat(_typeof(orm.stateSelector)));\n    }\n\n    return createSelectorCreator(memoize, undefined, orm)([orm.stateSelector].concat(_toConsumableArray(inputFuncs)), resultArg);\n  }\n\n  if (resultArg instanceof ORM) {\n    throw new Error(\"ORM instances cannot be the result function of selectors. You can access your models in the last function that you pass to `createSelector()`.\");\n  }\n\n  if (inputFuncs.length) {\n    console.warn(\"Your input selectors will be ignored: the passed result function does not require any input.\");\n  }\n\n  return toSelector(resultArg);\n}","map":{"version":3,"names":["_toConsumableArray","_typeof","createSelectorCreator","createCachedSelector","FlatMapCache","memoize","ORM","SelectorSpec","MapSelectorSpec","defaultUpdater","session","action","sessionBoundModels","forEach","modelClass","reducer","createReducer","orm","updater","arguments","length","undefined","state","getEmptyState","createSelectorFromSpec","spec","parentSelector","parent","createResultFunc","dependencies","resultFunc","keySelector","cacheObject","selectorCreator","createSelector","toORM","arg","_orm","selectorCache","Map","SELECTOR_KEY","Symbol","toSelector","stateSelector","selector","cachePath","level","has","set","ormSelectors","get","i","storageKey","Error","concat","JSON","stringify","_len","args","Array","_key","resultArg","pop","isArray","map","find","Boolean","inputFuncs","console","warn"],"sources":["/Users/developer/task/task3/node_modules/redux-orm/es/redux.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { createSelectorCreator } from \"reselect\";\nimport createCachedSelector, { FlatMapCache } from \"re-reselect\";\nimport { memoize } from \"./memoize\";\nimport { ORM } from \"./ORM\";\nimport SelectorSpec from \"./selectors/SelectorSpec\";\nimport MapSelectorSpec from \"./selectors/MapSelectorSpec\";\n/**\n * @module redux\n * @desc Provides functions for integration with Redux.\n */\n\n/**\n * Calls all models' reducers if they exist.\n *\n * @return {undefined}\n * @global\n */\n\nexport function defaultUpdater(session, action) {\n  session.sessionBoundModels.forEach(function (modelClass) {\n    if (typeof modelClass.reducer === \"function\") {\n      // This calls this.applyUpdate to update this.state\n      modelClass.reducer(action, modelClass, session);\n    }\n  });\n}\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\n\nexport function createReducer(orm) {\n  var updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultUpdater;\n  return function (state, action) {\n    var session = orm.session(state || orm.getEmptyState());\n    updater(session, action);\n    return session.state;\n  };\n}\n/**\n * @private\n * @param {SelectorSpec} spec\n */\n\nfunction createSelectorFromSpec(spec) {\n  if (spec instanceof MapSelectorSpec) {\n    var parentSelector = createSelectorFromSpec(spec.parent);\n    return spec.createResultFunc(parentSelector);\n  }\n\n  return createCachedSelector(spec.dependencies, spec.resultFunc)({\n    keySelector: spec.keySelector,\n    cacheObject: new FlatMapCache(),\n    selectorCreator: createSelector // eslint-disable-line no-use-before-define\n\n  });\n}\n/**\n * Tries to find ORM instance using the argument.\n * @private\n * @param {*} arg\n */\n\n\nfunction toORM(arg) {\n  /* eslint-disable no-underscore-dangle */\n  if (arg instanceof ORM) {\n    return arg;\n  }\n\n  if (arg instanceof SelectorSpec) {\n    return arg._orm;\n  }\n\n  return false;\n}\n\nvar selectorCache = new Map();\nvar SELECTOR_KEY = Symbol[\"for\"](\"REDUX_ORM_SELECTOR\");\n/**\n * @private\n * @param {function|ORM|SelectorSpec} arg\n */\n\nfunction toSelector(arg) {\n  if (typeof arg === \"function\") {\n    return arg;\n  }\n\n  if (arg instanceof ORM) {\n    return arg.stateSelector;\n  }\n\n  if (arg instanceof MapSelectorSpec) {\n    // the argument to map() needs to be callable\n    arg.selector = toSelector(arg.selector);\n  }\n\n  if (arg instanceof SelectorSpec) {\n    var orm = arg.orm,\n        cachePath = arg.cachePath;\n    var level; // the selector cache for the spec's ORM\n\n    if (!selectorCache.has(orm)) {\n      selectorCache.set(orm, new Map());\n    }\n\n    var ormSelectors = selectorCache.get(orm);\n    /**\n     * Drill down into selector map by cachePath.\n     *\n     * The selector itself is stored under a special SELECTOR_KEY\n     * so that we can store selectors below it as well.\n     */\n\n    level = ormSelectors;\n\n    for (var i = 0; i < cachePath.length; ++i) {\n      var storageKey = cachePath[i];\n\n      if (!level.has(storageKey)) {\n        level.set(storageKey, new Map());\n      }\n\n      level = level.get(storageKey);\n    }\n\n    if (level && level.has(SELECTOR_KEY)) {\n      // Cache hit: the selector has been created before\n      return level.get(SELECTOR_KEY);\n    } // Cache miss: the selector needs to be created\n\n\n    var selector = createSelectorFromSpec(arg); // Save the selector at the cachePath position\n\n    level.set(SELECTOR_KEY, selector);\n    return selector;\n  }\n\n  throw new Error(\"Failed to interpret selector argument: \".concat(JSON.stringify(arg), \" of type \").concat(_typeof(arg)));\n}\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, any of the arguments\n * you pass first will be considered selectors and mapped\n * to their outputs, like in `reselect`.\n *\n * Here are some example selectors:\n *\n * ```javascript\n * // orm is an instance of ORM\n * // reduxState is the state of a Redux store\n * const books = createSelector(orm.Book);\n * books(reduxState) // array of book refs\n *\n * const bookAuthors = createSelector(orm.Book.authors);\n * bookAuthors(reduxState) // two-dimensional array of author refs for each book\n * ```\n * Selectors can easily be applied to related models:\n * ```javascript\n * const bookAuthorNames = createSelector(\n *     orm.Book.authors.map(orm.Author.name),\n * );\n * bookAuthorNames(reduxState, 8) // names of all authors of book with ID 8\n * bookAuthorNames(reduxState, [8, 9]) // 2D array of names of all authors of books with IDs 8 and 9\n * ```\n * Also note that `orm.Author.name` did not need to be wrapped in another `createSelector` call,\n * although that would be possible.\n *\n * For more complex calculations you can access\n * entire session objects by passing an ORM instance.\n * ```javascript\n * const freshBananasCost = createSelector(\n *     orm,\n *     session => {\n *        const banana = session.Product.get({\n *            name: \"Banana\",\n *        });\n *        // amount of fresh bananas in shopping cart\n *        const amount = session.ShoppingCart.filter({\n *            product_id: banana.id,\n *            is_fresh: true,\n *        }).count();\n *        return `USD ${amount * banana.price}`;\n *     }\n * );\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use pure rendering in your React components\n * for performance gains.\n *\n * @global\n *\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\n\n\nexport function createSelector() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (!args.length) {\n    throw new Error(\"Cannot create a selector without arguments.\");\n  }\n\n  var resultArg = args.pop();\n  var dependencies = Array.isArray(args[0]) ? args[0] : args;\n  var orm = dependencies.map(toORM).find(Boolean);\n  var inputFuncs = dependencies.map(toSelector);\n\n  if (typeof resultArg === \"function\") {\n    if (!orm) {\n      throw new Error(\"Failed to resolve the current ORM database state. Please pass an ORM instance or an ORM selector as an argument to `createSelector()`.\");\n    } else if (!orm.stateSelector) {\n      throw new Error(\"Failed to resolve the current ORM database state. Please pass an object to the ORM constructor that specifies a `stateSelector` function.\");\n    } else if (typeof orm.stateSelector !== \"function\") {\n      throw new Error(\"Failed to resolve the current ORM database state. Please pass a function when specifying the ORM's `stateSelector`. Received: \".concat(JSON.stringify(orm.stateSelector), \" of type \").concat(_typeof(orm.stateSelector)));\n    }\n\n    return createSelectorCreator(memoize, undefined, orm)([orm.stateSelector].concat(_toConsumableArray(inputFuncs)), resultArg);\n  }\n\n  if (resultArg instanceof ORM) {\n    throw new Error(\"ORM instances cannot be the result function of selectors. You can access your models in the last function that you pass to `createSelector()`.\");\n  }\n\n  if (inputFuncs.length) {\n    console.warn(\"Your input selectors will be ignored: the passed result function does not require any input.\");\n  }\n\n  return toSelector(resultArg);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
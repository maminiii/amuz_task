{"ast":null,"code":"import { createAction } from \"@reduxjs/toolkit\";\nimport Model, { attr, fk } from \"redux-orm\"; // =====ACTIONS=====\n\nexport const createComment = createAction(\"models/comments/create\");\nexport const deleteComment = createAction(\"models/comments/delete\"); // =====MODEL=====\n\nexport class Comment extends Model {\n  static get fields() {\n    return {\n      id: attr(),\n      postId: fk({\n        to: \"Post\",\n        as: \"post\",\n        relatedName: \"comments\"\n      }),\n      email: attr(),\n      body: attr(),\n      name: attr()\n    };\n  }\n\n  static reducer(_ref, Comment, session) {\n    let {\n      type,\n      payload\n    } = _ref;\n\n    switch (type) {\n      case createComment.type:\n        {\n          if (!payload.body || !payload.postId || !payload.id) {\n            console.warn(\"Unable to create a comment with no body or post\");\n          } else {\n            Comment.upsert(payload);\n          }\n\n          break;\n        }\n\n      case deleteComment.type:\n        {\n          let comment = Comment.withId(payload);\n          comment.delete();\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n}\nComment.modelName = \"Comment\";","map":{"version":3,"names":["createAction","Model","attr","fk","createComment","deleteComment","Comment","fields","id","postId","to","as","relatedName","email","body","name","reducer","session","type","payload","console","warn","upsert","comment","withId","delete","modelName"],"sources":["/Users/developer/task/task3/src/store/modelDucks/Comment.js"],"sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nimport Model, { attr, fk } from \"redux-orm\";\n\n// =====ACTIONS=====\nexport const createComment = createAction(\"models/comments/create\");\nexport const deleteComment = createAction(\"models/comments/delete\");\n\n// =====MODEL=====\nexport class Comment extends Model {\n  static modelName = \"Comment\";\n\n  static get fields() {\n    return {\n      id: attr(),\n      postId: fk({\n        to: \"Post\",\n        as: \"post\",\n        relatedName: \"comments\",\n      }),\n      email: attr(),\n      body: attr(),\n      name: attr(),\n    };\n  }\n\n  static reducer({ type, payload }, Comment, session) {\n    switch (type) {\n      case createComment.type: {\n        if (!payload.body || !payload.postId || !payload.id) {\n          console.warn(\"Unable to create a comment with no body or post\");\n        } else {\n          Comment.upsert(payload);\n        }\n        break;\n      }\n      case deleteComment.type: {\n        let comment = Comment.withId(payload);\n        comment.delete();\n        break;\n      }\n      default:\n        break;\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,IAAhB,EAAsBC,EAAtB,QAAgC,WAAhC,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAGJ,YAAY,CAAC,wBAAD,CAAlC;AACP,OAAO,MAAMK,aAAa,GAAGL,YAAY,CAAC,wBAAD,CAAlC,C,CAEP;;AACA,OAAO,MAAMM,OAAN,SAAsBL,KAAtB,CAA4B;EAGhB,WAANM,MAAM,GAAG;IAClB,OAAO;MACLC,EAAE,EAAEN,IAAI,EADH;MAELO,MAAM,EAAEN,EAAE,CAAC;QACTO,EAAE,EAAE,MADK;QAETC,EAAE,EAAE,MAFK;QAGTC,WAAW,EAAE;MAHJ,CAAD,CAFL;MAOLC,KAAK,EAAEX,IAAI,EAPN;MAQLY,IAAI,EAAEZ,IAAI,EARL;MASLa,IAAI,EAAEb,IAAI;IATL,CAAP;EAWD;;EAEa,OAAPc,OAAO,OAAoBV,OAApB,EAA6BW,OAA7B,EAAsC;IAAA,IAArC;MAAEC,IAAF;MAAQC;IAAR,CAAqC;;IAClD,QAAQD,IAAR;MACE,KAAKd,aAAa,CAACc,IAAnB;QAAyB;UACvB,IAAI,CAACC,OAAO,CAACL,IAAT,IAAiB,CAACK,OAAO,CAACV,MAA1B,IAAoC,CAACU,OAAO,CAACX,EAAjD,EAAqD;YACnDY,OAAO,CAACC,IAAR,CAAa,iDAAb;UACD,CAFD,MAEO;YACLf,OAAO,CAACgB,MAAR,CAAeH,OAAf;UACD;;UACD;QACD;;MACD,KAAKd,aAAa,CAACa,IAAnB;QAAyB;UACvB,IAAIK,OAAO,GAAGjB,OAAO,CAACkB,MAAR,CAAeL,OAAf,CAAd;UACAI,OAAO,CAACE,MAAR;UACA;QACD;;MACD;QACE;IAfJ;EAiBD;;AAnCgC;AAAtBnB,O,CACJoB,S,GAAY,S"},"metadata":{},"sourceType":"module"}
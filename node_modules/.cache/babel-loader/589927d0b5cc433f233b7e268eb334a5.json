{"ast":null,"code":"import { createSelector } from \"redux-orm\";\nimport orm from \"../orm\"; // =====SELECTORS=====\n// ALL POSTS\n// returns all posts, with the user's name included\n\nexport const postsSelector = createSelector(orm, session => {\n  const postModels = session.Post.all().toModelArray();\n  console.log(\"##postModels\", postModels);\n  const formattedPosts = postModels.map(post => {\n    let userId = \"\";\n\n    if (!post.userId) {\n      console.warn(\"No user model found for post: \", post);\n    } else {\n      userId = post.userId;\n    }\n\n    return {\n      id: post.id,\n      userId,\n      title: post.title,\n      completed: post.completed,\n      postId: post.postId\n    };\n  });\n  return formattedPosts;\n}); // CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\n// export const currentUserPostsSelector = createSelector(\n//   [orm, (state) => state.currentUser],\n//   (session, currentUser) => {\n//     if (currentUser === undefined || currentUser === null) return [];\n//     const postModels = session.Post.all().toModelArray();\n//     return postModels.flatMap((post) => {\n//       if (post.user.id === currentUser) {\n//         return [\n//           {\n//             id: post.id,\n//             content: post.content,\n//             name: post.user.name,\n//           },\n//         ];\n//       } else {\n//         return [];\n//       }\n//     });\n//   }\n// );\n// POSTS BY ID\n// e.g.   const userPosts = useSelector(state => userPostsSelector(state, id));\n// would return an array of posts for the user with the given id\n// (redux-orm style, not used in app)\n\nexport const userPostsSelector = createSelector([orm.User, orm.User.posts], (user, posts) => {\n  if (!posts) return [];\n  return posts.map(post => ({\n    id: post.id,\n    userId: user.id,\n    title: post.title,\n    completed: post.completed,\n    postId: post.postId\n  }));\n});","map":{"version":3,"names":["createSelector","orm","postsSelector","session","postModels","Post","all","toModelArray","console","log","formattedPosts","map","post","userId","warn","id","title","completed","postId","userPostsSelector","User","posts","user"],"sources":["/Users/developer/task/task3/src/store/modelDucks/PostSelectors.js"],"sourcesContent":["import { createSelector } from \"redux-orm\";\nimport orm from \"../orm\";\n\n// =====SELECTORS=====\n// ALL POSTS\n// returns all posts, with the user's name included\nexport const postsSelector = createSelector(orm, (session) => {\n  const postModels = session.Post.all().toModelArray();\n  console.log(\"##postModels\", postModels);\n  const formattedPosts = postModels.map((post) => {\n    let userId = \"\";\n    if (!post.userId) {\n      console.warn(\"No user model found for post: \", post);\n    } else {\n      userId = post.userId;\n    }\n    return {\n      id: post.id,\n      userId,\n      title: post.title,\n      completed: post.completed,\n      postId: post.postId,\n    };\n  });\n  return formattedPosts;\n});\n\n// CURRENT USER POSTS\n// returns posts for the current user (based on currentUser 'id' in store)\n// export const currentUserPostsSelector = createSelector(\n//   [orm, (state) => state.currentUser],\n//   (session, currentUser) => {\n//     if (currentUser === undefined || currentUser === null) return [];\n//     const postModels = session.Post.all().toModelArray();\n//     return postModels.flatMap((post) => {\n//       if (post.user.id === currentUser) {\n//         return [\n//           {\n//             id: post.id,\n//             content: post.content,\n//             name: post.user.name,\n//           },\n//         ];\n//       } else {\n//         return [];\n//       }\n//     });\n//   }\n// );\n\n// POSTS BY ID\n// e.g.   const userPosts = useSelector(state => userPostsSelector(state, id));\n// would return an array of posts for the user with the given id\n// (redux-orm style, not used in app)\nexport const userPostsSelector = createSelector(\n  [orm.User, orm.User.posts],\n  (user, posts) => {\n    if (!posts) return [];\n    return posts.map((post) => ({\n      id: post.id,\n      userId: user.id,\n      title: post.title,\n      completed: post.completed,\n      postId: post.postId,\n    }));\n  }\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGF,cAAc,CAACC,GAAD,EAAOE,OAAD,IAAa;EAC5D,MAAMC,UAAU,GAAGD,OAAO,CAACE,IAAR,CAAaC,GAAb,GAAmBC,YAAnB,EAAnB;EACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,UAA5B;EACA,MAAMM,cAAc,GAAGN,UAAU,CAACO,GAAX,CAAgBC,IAAD,IAAU;IAC9C,IAAIC,MAAM,GAAG,EAAb;;IACA,IAAI,CAACD,IAAI,CAACC,MAAV,EAAkB;MAChBL,OAAO,CAACM,IAAR,CAAa,gCAAb,EAA+CF,IAA/C;IACD,CAFD,MAEO;MACLC,MAAM,GAAGD,IAAI,CAACC,MAAd;IACD;;IACD,OAAO;MACLE,EAAE,EAAEH,IAAI,CAACG,EADJ;MAELF,MAFK;MAGLG,KAAK,EAAEJ,IAAI,CAACI,KAHP;MAILC,SAAS,EAAEL,IAAI,CAACK,SAJX;MAKLC,MAAM,EAAEN,IAAI,CAACM;IALR,CAAP;EAOD,CAdsB,CAAvB;EAeA,OAAOR,cAAP;AACD,CAnB0C,CAApC,C,CAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMS,iBAAiB,GAAGnB,cAAc,CAC7C,CAACC,GAAG,CAACmB,IAAL,EAAWnB,GAAG,CAACmB,IAAJ,CAASC,KAApB,CAD6C,EAE7C,CAACC,IAAD,EAAOD,KAAP,KAAiB;EACf,IAAI,CAACA,KAAL,EAAY,OAAO,EAAP;EACZ,OAAOA,KAAK,CAACV,GAAN,CAAWC,IAAD,KAAW;IAC1BG,EAAE,EAAEH,IAAI,CAACG,EADiB;IAE1BF,MAAM,EAAES,IAAI,CAACP,EAFa;IAG1BC,KAAK,EAAEJ,IAAI,CAACI,KAHc;IAI1BC,SAAS,EAAEL,IAAI,CAACK,SAJU;IAK1BC,MAAM,EAAEN,IAAI,CAACM;EALa,CAAX,CAAV,CAAP;AAOD,CAX4C,CAAxC"},"metadata":{},"sourceType":"module"}
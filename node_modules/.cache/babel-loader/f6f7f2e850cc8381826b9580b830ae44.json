{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ManageData = () => {\n  _s();\n\n  const [userList, setUserList] = useState([]);\n  const [postList, setPostList] = useState([]);\n\n  const fetchUser = async () => {\n    try {\n      const userRes = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n      setUserList(userRes.data);\n      userList.forEach((user, idx) => {\n        store.dispatch(createUser({\n          id: idx + 1,\n          name: user.name,\n          username: user.username,\n          email: user.email,\n          address: user.address,\n          company: user.company,\n          phone: user.phone,\n          website: user.website\n        }));\n      });\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  const fetchPost = async () => {\n    try {\n      const postRes = await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\n      let newArr = [];\n      userList.forEach(user => {\n        let i = 0;\n        postRes.data.forEach((post, idx) => {\n          if (post.userId === user.id) {\n            newArr.push(idx);\n            store.dispatch(createPost({\n              id: idx + 1,\n              userId: post.userId,\n              title: post.title,\n              completed: post.completed,\n              postId: i\n            }));\n            i++;\n          }\n        });\n      });\n      setPostList(newArr);\n      console.log(\"##fetchPost end\");\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  const fetchComment = async itemId => {\n    try {\n      console.log(\"##postList.length\", postList.length);\n\n      for (let idx = 0; idx < postList.length; idx++) {\n        const commentRes = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`);\n        const commentList = commentRes.data;\n        commentList.forEach(comment => {\n          store.dispatch(createComment({\n            id: comment.id,\n            postId: comment.postId,\n            body: comment.body,\n            email: comment.email,\n            name: comment.name\n          }));\n        });\n      }\n\n      console.log(\"##fetchComment end\");\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  useLayoutEffect(() => {\n    fetchUser();\n  }, []);\n  useLayoutEffect(() => {\n    fetchPost();\n  }, [userList]);\n  useLayoutEffect(() => {\n    fetchComment();\n  }, [postList]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ManageData, \"0aZ6ZnVtgwO27uXirCbdDOTgYsM=\");\n\n_c = ManageData;\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer\n  }\n}); // add some initial fake data\n\nManageData();\nexport default store;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageData\");","map":{"version":3,"names":["configureStore","axios","React","useLayoutEffect","useState","reducer","currentPostReducer","createComment","createPost","createUser","ormReducer","ManageData","userList","setUserList","postList","setPostList","fetchUser","userRes","get","data","forEach","user","idx","store","dispatch","id","name","username","email","address","company","phone","website","e","console","log","fetchPost","postRes","newArr","i","post","userId","push","title","completed","postId","fetchComment","itemId","length","commentRes","commentList","comment","body","orm","currentPost"],"sources":["/Users/developer/task/task3/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\nimport { createComment } from \"./modelDucks/Comment\";\nimport { createPost } from \"./modelDucks/Post\";\nimport { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\n\nconst ManageData = () => {\n  const [userList, setUserList] = useState([]);\n  const [postList, setPostList] = useState([]);\n  const fetchUser = async () => {\n    try {\n      const userRes = await axios.get(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n\n      setUserList(userRes.data);\n      userList.forEach((user, idx) => {\n        store.dispatch(\n          createUser({\n            id: idx + 1,\n            name: user.name,\n            username: user.username,\n            email: user.email,\n            address: user.address,\n            company: user.company,\n            phone: user.phone,\n            website: user.website,\n          })\n        );\n      });\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  const fetchPost = async () => {\n    try {\n      const postRes = await axios.get(\n        \"https://jsonplaceholder.typicode.com/todos\"\n      );\n      let newArr = [];\n      userList.forEach((user) => {\n        let i = 0;\n\n        postRes.data.forEach((post, idx) => {\n          if (post.userId === user.id) {\n            newArr.push(idx);\n            store.dispatch(\n              createPost({\n                id: idx + 1,\n                userId: post.userId,\n                title: post.title,\n                completed: post.completed,\n                postId: i,\n              })\n            );\n            i++;\n          }\n        });\n      });\n      setPostList(newArr);\n      console.log(\"##fetchPost end\");\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  const fetchComment = async (itemId) => {\n    try {\n      console.log(\"##postList.length\", postList.length);\n      for (let idx = 0; idx < postList.length; idx++) {\n        const commentRes = await axios.get(\n          `https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`\n        );\n        const commentList = commentRes.data;\n\n        commentList.forEach((comment) => {\n          store.dispatch(\n            createComment({\n              id: comment.id,\n              postId: comment.postId,\n              body: comment.body,\n              email: comment.email,\n              name: comment.name,\n            })\n          );\n        });\n      }\n      console.log(\"##fetchComment end\");\n    } catch (e) {\n      console.log(\"##error\", e);\n    }\n  };\n\n  useLayoutEffect(() => {\n    fetchUser();\n  }, []);\n  useLayoutEffect(() => {\n    fetchPost();\n  }, [userList]);\n  useLayoutEffect(() => {\n    fetchComment();\n  }, [postList]);\n\n  return <></>;\n};\n\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n  },\n});\n\n// add some initial fake data\n\nManageData();\nexport default store;\n"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,qBAA9C;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASJ,OAAO,IAAIK,UAApB,QAAsC,OAAtC;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACvB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;;EACA,MAAMY,SAAS,GAAG,YAAY;IAC5B,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CACpB,4CADoB,CAAtB;MAIAL,WAAW,CAACI,OAAO,CAACE,IAAT,CAAX;MACAP,QAAQ,CAACQ,OAAT,CAAiB,CAACC,IAAD,EAAOC,GAAP,KAAe;QAC9BC,KAAK,CAACC,QAAN,CACEf,UAAU,CAAC;UACTgB,EAAE,EAAEH,GAAG,GAAG,CADD;UAETI,IAAI,EAAEL,IAAI,CAACK,IAFF;UAGTC,QAAQ,EAAEN,IAAI,CAACM,QAHN;UAITC,KAAK,EAAEP,IAAI,CAACO,KAJH;UAKTC,OAAO,EAAER,IAAI,CAACQ,OALL;UAMTC,OAAO,EAAET,IAAI,CAACS,OANL;UAOTC,KAAK,EAAEV,IAAI,CAACU,KAPH;UAQTC,OAAO,EAAEX,IAAI,CAACW;QARL,CAAD,CADZ;MAYD,CAbD;IAcD,CApBD,CAoBE,OAAOC,CAAP,EAAU;MACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;IACD;EACF,CAxBD;;EA0BA,MAAMG,SAAS,GAAG,YAAY;IAC5B,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMpC,KAAK,CAACiB,GAAN,CACpB,4CADoB,CAAtB;MAGA,IAAIoB,MAAM,GAAG,EAAb;MACA1B,QAAQ,CAACQ,OAAT,CAAkBC,IAAD,IAAU;QACzB,IAAIkB,CAAC,GAAG,CAAR;QAEAF,OAAO,CAAClB,IAAR,CAAaC,OAAb,CAAqB,CAACoB,IAAD,EAAOlB,GAAP,KAAe;UAClC,IAAIkB,IAAI,CAACC,MAAL,KAAgBpB,IAAI,CAACI,EAAzB,EAA6B;YAC3Ba,MAAM,CAACI,IAAP,CAAYpB,GAAZ;YACAC,KAAK,CAACC,QAAN,CACEhB,UAAU,CAAC;cACTiB,EAAE,EAAEH,GAAG,GAAG,CADD;cAETmB,MAAM,EAAED,IAAI,CAACC,MAFJ;cAGTE,KAAK,EAAEH,IAAI,CAACG,KAHH;cAITC,SAAS,EAAEJ,IAAI,CAACI,SAJP;cAKTC,MAAM,EAAEN;YALC,CAAD,CADZ;YASAA,CAAC;UACF;QACF,CAdD;MAeD,CAlBD;MAmBAxB,WAAW,CAACuB,MAAD,CAAX;MACAJ,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACD,CA1BD,CA0BE,OAAOF,CAAP,EAAU;MACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;IACD;EACF,CA9BD;;EAgCA,MAAMa,YAAY,GAAG,MAAOC,MAAP,IAAkB;IACrC,IAAI;MACFb,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCrB,QAAQ,CAACkC,MAA1C;;MACA,KAAK,IAAI1B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGR,QAAQ,CAACkC,MAAjC,EAAyC1B,GAAG,EAA5C,EAAgD;QAC9C,MAAM2B,UAAU,GAAG,MAAMhD,KAAK,CAACiB,GAAN,CACtB,wDAAuDI,GAAG,GAAG,CAAE,EADzC,CAAzB;QAGA,MAAM4B,WAAW,GAAGD,UAAU,CAAC9B,IAA/B;QAEA+B,WAAW,CAAC9B,OAAZ,CAAqB+B,OAAD,IAAa;UAC/B5B,KAAK,CAACC,QAAN,CACEjB,aAAa,CAAC;YACZkB,EAAE,EAAE0B,OAAO,CAAC1B,EADA;YAEZoB,MAAM,EAAEM,OAAO,CAACN,MAFJ;YAGZO,IAAI,EAAED,OAAO,CAACC,IAHF;YAIZxB,KAAK,EAAEuB,OAAO,CAACvB,KAJH;YAKZF,IAAI,EAAEyB,OAAO,CAACzB;UALF,CAAD,CADf;QASD,CAVD;MAWD;;MACDQ,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACD,CArBD,CAqBE,OAAOF,CAAP,EAAU;MACVC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;IACD;EACF,CAzBD;;EA2BA9B,eAAe,CAAC,MAAM;IACpBa,SAAS;EACV,CAFc,EAEZ,EAFY,CAAf;EAGAb,eAAe,CAAC,MAAM;IACpBiC,SAAS;EACV,CAFc,EAEZ,CAACxB,QAAD,CAFY,CAAf;EAGAT,eAAe,CAAC,MAAM;IACpB2C,YAAY;EACb,CAFc,EAEZ,CAAChC,QAAD,CAFY,CAAf;EAIA,oBAAO,qCAAP;AACD,CAnGD;;GAAMH,U;;KAAAA,U;AAqGN,MAAMY,KAAK,GAAGvB,cAAc,CAAC;EAC3BK,OAAO,EAAE;IACPgD,GAAG,EAAE3C,UADE;IAEP4C,WAAW,EAAEhD;EAFN;AADkB,CAAD,CAA5B,C,CAOA;;AAEAK,UAAU;AACV,eAAeY,KAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\"; // import { createComment } from \"./modelDucks/Comment\";\n// import { createPost } from \"./modelDucks/Post\";\n// import { createUser } from \"./modelDucks/User\";\n\nimport { reducer as ormReducer } from \"./orm\";\nconst initialState = {\n  num: 0\n};\nexport const numReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      return { ...state,\n        num: state.num + 1\n      };\n\n    default:\n      return state;\n  }\n};\nexport const add = () => ({\n  type: \"ADD\"\n});\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n    numReducer: numReducer\n  }\n}); // add some initial fake data\n\nlet userList = [];\nlet postList = []; // const fetchUser = async () => {\n//   try {\n//     const userRes = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     userList = userRes.data;\n//     userList.forEach((user, idx) => {\n//       store.dispatch(\n//         createUser({\n//           id: idx + 1,\n//           name: user.name,\n//           username: user.username,\n//           email: user.email,\n//           address: user.address,\n//           company: user.company,\n//           phone: user.phone,\n//           website: user.website,\n//         })\n//       );\n//     });\n//     console.log(\"##fetchUser end\");\n//   } catch (e) {\n//     console.log(\"##error\", e);\n//   }\n// };\n//\n// const fetchComment = async (itemId) => {\n//   try {\n//     for (let idx = 0; idx < 200; idx++) {\n//       const commentRes = await axios.get(\n//         `https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`\n//       );\n//       const commentList = commentRes.data;\n//       commentList.forEach((comment) => {\n//         store.dispatch(\n//           createComment({\n//             id: comment.id,\n//             postId: comment.postId,\n//             body: comment.body,\n//             email: comment.email,\n//             name: comment.name,\n//           })\n//         );\n//       });\n//     }\n//     console.log(\"##fetchComment end\");\n//   } catch (e) {\n//     console.log(\"##error\", e);\n//   }\n// };\n\nconst init = () => {// fetchUser();\n  // fetchPost();\n  //fetchComment();\n};\n\ninit();\nexport default store;","map":{"version":3,"names":["configureStore","reducer","currentPostReducer","ormReducer","initialState","num","numReducer","state","action","type","add","store","orm","currentPost","userList","postList","init"],"sources":["/Users/developer/task/task3/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer as currentPostReducer } from \"./ducks/currentPost\";\n// import { createComment } from \"./modelDucks/Comment\";\n// import { createPost } from \"./modelDucks/Post\";\n// import { createUser } from \"./modelDucks/User\";\nimport { reducer as ormReducer } from \"./orm\";\n\nconst initialState = {\n  num: 0,\n};\nexport const numReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      return {\n        ...state,\n        num: state.num + 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const add = () => ({\n  type: \"ADD\",\n});\n\nconst store = configureStore({\n  reducer: {\n    orm: ormReducer,\n    currentPost: currentPostReducer,\n    numReducer: numReducer,\n  },\n});\n\n// add some initial fake data\nlet userList = [];\nlet postList = [];\n// const fetchUser = async () => {\n//   try {\n//     const userRes = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     userList = userRes.data;\n\n//     userList.forEach((user, idx) => {\n//       store.dispatch(\n//         createUser({\n//           id: idx + 1,\n//           name: user.name,\n//           username: user.username,\n//           email: user.email,\n//           address: user.address,\n//           company: user.company,\n//           phone: user.phone,\n//           website: user.website,\n//         })\n//       );\n//     });\n//     console.log(\"##fetchUser end\");\n//   } catch (e) {\n//     console.log(\"##error\", e);\n//   }\n// };\n\n//\n\n// const fetchComment = async (itemId) => {\n//   try {\n//     for (let idx = 0; idx < 200; idx++) {\n//       const commentRes = await axios.get(\n//         `https://jsonplaceholder.typicode.com/comments?postId=${idx + 1}`\n//       );\n//       const commentList = commentRes.data;\n\n//       commentList.forEach((comment) => {\n//         store.dispatch(\n//           createComment({\n//             id: comment.id,\n//             postId: comment.postId,\n//             body: comment.body,\n//             email: comment.email,\n//             name: comment.name,\n//           })\n//         );\n//       });\n//     }\n//     console.log(\"##fetchComment end\");\n//   } catch (e) {\n//     console.log(\"##error\", e);\n//   }\n// };\n\nconst init = () => {\n  // fetchUser();\n  // fetchPost();\n  //fetchComment();\n};\n\ninit();\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,qBAA9C,C,CACA;AACA;AACA;;AACA,SAASD,OAAO,IAAIE,UAApB,QAAsC,OAAtC;AAEA,MAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE;AADc,CAArB;AAGA,OAAO,MAAMC,UAAU,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBH,YAAyB;EAAA,IAAXI,MAAW;;EAC1D,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,KAAL;MACE,OAAO,EACL,GAAGF,KADE;QAELF,GAAG,EAAEE,KAAK,CAACF,GAAN,GAAY;MAFZ,CAAP;;IAIF;MACE,OAAOE,KAAP;EAPJ;AASD,CAVM;AAYP,OAAO,MAAMG,GAAG,GAAG,OAAO;EACxBD,IAAI,EAAE;AADkB,CAAP,CAAZ;AAIP,MAAME,KAAK,GAAGX,cAAc,CAAC;EAC3BC,OAAO,EAAE;IACPW,GAAG,EAAET,UADE;IAEPU,WAAW,EAAEX,kBAFN;IAGPI,UAAU,EAAEA;EAHL;AADkB,CAAD,CAA5B,C,CAQA;;AACA,IAAIQ,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,EAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM,CACjB;EACA;EACA;AACD,CAJD;;AAMAA,IAAI;AACJ,eAAeL,KAAf"},"metadata":{},"sourceType":"module"}